<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="982" onload="init(evt)" viewBox="0 0 1200 982" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="982" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="965.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="965.00"> </text><svg id="frames" x="10" width="1180" total_samples="1800"><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.39%)</title><rect x="0.0000%" y="885" width="0.3889%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="7"/><text x="0.2500%" y="895.50"></text></g><g><title>core::ptr::read (7 samples, 0.39%)</title><rect x="0.0000%" y="869" width="0.3889%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="7"/><text x="0.2500%" y="879.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (10 samples, 0.56%)</title><rect x="0.3889%" y="885" width="0.5556%" height="15" fill="rgb(221,193,54)" fg:x="7" fg:w="10"/><text x="0.6389%" y="895.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (8 samples, 0.44%)</title><rect x="0.5000%" y="869" width="0.4444%" height="15" fill="rgb(248,212,6)" fg:x="9" fg:w="8"/><text x="0.7500%" y="879.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (8 samples, 0.44%)</title><rect x="0.5000%" y="853" width="0.4444%" height="15" fill="rgb(208,68,35)" fg:x="9" fg:w="8"/><text x="0.7500%" y="863.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (8 samples, 0.44%)</title><rect x="0.5000%" y="837" width="0.4444%" height="15" fill="rgb(232,128,0)" fg:x="9" fg:w="8"/><text x="0.7500%" y="847.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.06%)</title><rect x="0.8889%" y="821" width="0.0556%" height="15" fill="rgb(207,160,47)" fg:x="16" fg:w="1"/><text x="1.1389%" y="831.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.06%)</title><rect x="0.8889%" y="805" width="0.0556%" height="15" fill="rgb(228,23,34)" fg:x="16" fg:w="1"/><text x="1.1389%" y="815.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (12 samples, 0.67%)</title><rect x="0.9444%" y="885" width="0.6667%" height="15" fill="rgb(218,30,26)" fg:x="17" fg:w="12"/><text x="1.1944%" y="895.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (10 samples, 0.56%)</title><rect x="1.0556%" y="869" width="0.5556%" height="15" fill="rgb(220,122,19)" fg:x="19" fg:w="10"/><text x="1.3056%" y="879.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (10 samples, 0.56%)</title><rect x="1.0556%" y="853" width="0.5556%" height="15" fill="rgb(250,228,42)" fg:x="19" fg:w="10"/><text x="1.3056%" y="863.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::count::to_usize::_{{closure}} (10 samples, 0.56%)</title><rect x="1.0556%" y="837" width="0.5556%" height="15" fill="rgb(240,193,28)" fg:x="19" fg:w="10"/><text x="1.3056%" y="847.50"></text></g><g><title>aoc23::day4b::parse_game::_{{closure}} (10 samples, 0.56%)</title><rect x="1.0556%" y="821" width="0.5556%" height="15" fill="rgb(216,20,37)" fg:x="19" fg:w="10"/><text x="1.3056%" y="831.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (10 samples, 0.56%)</title><rect x="1.0556%" y="805" width="0.5556%" height="15" fill="rgb(206,188,39)" fg:x="19" fg:w="10"/><text x="1.3056%" y="815.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.28%)</title><rect x="1.6111%" y="885" width="0.2778%" height="15" fill="rgb(217,207,13)" fg:x="29" fg:w="5"/><text x="1.8611%" y="895.50"></text></g><g><title>[libc.so.6] (1 samples, 0.06%)</title><rect x="1.8889%" y="885" width="0.0556%" height="15" fill="rgb(231,73,38)" fg:x="34" fg:w="1"/><text x="2.1389%" y="895.50"></text></g><g><title>alloc::collections::btree::append::&lt;impl alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::bulk_push (3 samples, 0.17%)</title><rect x="1.9444%" y="885" width="0.1667%" height="15" fill="rgb(225,20,46)" fg:x="35" fg:w="3"/><text x="2.1944%" y="895.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.11%)</title><rect x="2.1111%" y="885" width="0.1111%" height="15" fill="rgb(210,31,41)" fg:x="38" fg:w="2"/><text x="2.3611%" y="895.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (2 samples, 0.11%)</title><rect x="2.1111%" y="869" width="0.1111%" height="15" fill="rgb(221,200,47)" fg:x="38" fg:w="2"/><text x="2.3611%" y="879.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (1 samples, 0.06%)</title><rect x="2.1667%" y="853" width="0.0556%" height="15" fill="rgb(226,26,5)" fg:x="39" fg:w="1"/><text x="2.4167%" y="863.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (1 samples, 0.06%)</title><rect x="2.1667%" y="837" width="0.0556%" height="15" fill="rgb(249,33,26)" fg:x="39" fg:w="1"/><text x="2.4167%" y="847.50"></text></g><g><title>cfree (1 samples, 0.06%)</title><rect x="2.2222%" y="885" width="0.0556%" height="15" fill="rgb(235,183,28)" fg:x="40" fg:w="1"/><text x="2.4722%" y="895.50"></text></g><g><title>malloc (1 samples, 0.06%)</title><rect x="2.2778%" y="885" width="0.0556%" height="15" fill="rgb(221,5,38)" fg:x="41" fg:w="1"/><text x="2.5278%" y="895.50"></text></g><g><title>[[heap]] (44 samples, 2.44%)</title><rect x="0.0000%" y="901" width="2.4444%" height="15" fill="rgb(247,18,42)" fg:x="0" fg:w="44"/><text x="0.2500%" y="911.50">[[..</text></g><g><title>std::sys::unix::memchr::memchr (2 samples, 0.11%)</title><rect x="2.3333%" y="885" width="0.1111%" height="15" fill="rgb(241,131,45)" fg:x="42" fg:w="2"/><text x="2.5833%" y="895.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.06%)</title><rect x="2.4444%" y="885" width="0.0556%" height="15" fill="rgb(249,31,29)" fg:x="44" fg:w="1"/><text x="2.6944%" y="895.50"></text></g><g><title>[libc.so.6] (3 samples, 0.17%)</title><rect x="2.5000%" y="885" width="0.1667%" height="15" fill="rgb(225,111,53)" fg:x="45" fg:w="3"/><text x="2.7500%" y="895.50"></text></g><g><title>cfree (1 samples, 0.06%)</title><rect x="2.6667%" y="885" width="0.0556%" height="15" fill="rgb(238,160,17)" fg:x="48" fg:w="1"/><text x="2.9167%" y="895.50"></text></g><g><title>aoc23::day4b::parse_game (1 samples, 0.06%)</title><rect x="2.8333%" y="853" width="0.0556%" height="15" fill="rgb(214,148,48)" fg:x="51" fg:w="1"/><text x="3.0833%" y="863.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::count (1 samples, 0.06%)</title><rect x="2.8333%" y="837" width="0.0556%" height="15" fill="rgb(232,36,49)" fg:x="51" fg:w="1"/><text x="3.0833%" y="847.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (1 samples, 0.06%)</title><rect x="2.8333%" y="821" width="0.0556%" height="15" fill="rgb(209,103,24)" fg:x="51" fg:w="1"/><text x="3.0833%" y="831.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (1 samples, 0.06%)</title><rect x="2.8333%" y="805" width="0.0556%" height="15" fill="rgb(229,88,8)" fg:x="51" fg:w="1"/><text x="3.0833%" y="815.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (4 samples, 0.22%)</title><rect x="2.7222%" y="885" width="0.2222%" height="15" fill="rgb(213,181,19)" fg:x="49" fg:w="4"/><text x="2.9722%" y="895.50"></text></g><g><title>aoc23::day4b::solve_file::_{{closure}} (2 samples, 0.11%)</title><rect x="2.8333%" y="869" width="0.1111%" height="15" fill="rgb(254,191,54)" fg:x="51" fg:w="2"/><text x="3.0833%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (1 samples, 0.06%)</title><rect x="2.8889%" y="853" width="0.0556%" height="15" fill="rgb(241,83,37)" fg:x="52" fg:w="1"/><text x="3.1389%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1 samples, 0.06%)</title><rect x="2.8889%" y="837" width="0.0556%" height="15" fill="rgb(233,36,39)" fg:x="52" fg:w="1"/><text x="3.1389%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1 samples, 0.06%)</title><rect x="2.8889%" y="821" width="0.0556%" height="15" fill="rgb(226,3,54)" fg:x="52" fg:w="1"/><text x="3.1389%" y="831.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.06%)</title><rect x="2.8889%" y="805" width="0.0556%" height="15" fill="rgb(245,192,40)" fg:x="52" fg:w="1"/><text x="3.1389%" y="815.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.06%)</title><rect x="2.8889%" y="789" width="0.0556%" height="15" fill="rgb(238,167,29)" fg:x="52" fg:w="1"/><text x="3.1389%" y="799.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.06%)</title><rect x="2.8889%" y="773" width="0.0556%" height="15" fill="rgb(232,182,51)" fg:x="52" fg:w="1"/><text x="3.1389%" y="783.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (2 samples, 0.11%)</title><rect x="2.9444%" y="885" width="0.1111%" height="15" fill="rgb(231,60,39)" fg:x="53" fg:w="2"/><text x="3.1944%" y="895.50"></text></g><g><title>malloc (1 samples, 0.06%)</title><rect x="3.0556%" y="885" width="0.0556%" height="15" fill="rgb(208,69,12)" fg:x="55" fg:w="1"/><text x="3.3056%" y="895.50"></text></g><g><title>[[stack]] (15 samples, 0.83%)</title><rect x="2.4444%" y="901" width="0.8333%" height="15" fill="rgb(235,93,37)" fg:x="44" fg:w="15"/><text x="2.6944%" y="911.50"></text></g><g><title>std::io::append_to_string (3 samples, 0.17%)</title><rect x="3.1111%" y="885" width="0.1667%" height="15" fill="rgb(213,116,39)" fg:x="56" fg:w="3"/><text x="3.3611%" y="895.50"></text></g><g><title>std::io::BufRead::read_line::_{{closure}} (1 samples, 0.06%)</title><rect x="3.2222%" y="869" width="0.0556%" height="15" fill="rgb(222,207,29)" fg:x="58" fg:w="1"/><text x="3.4722%" y="879.50"></text></g><g><title>std::io::read_until (1 samples, 0.06%)</title><rect x="3.2222%" y="853" width="0.0556%" height="15" fill="rgb(206,96,30)" fg:x="58" fg:w="1"/><text x="3.4722%" y="863.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::BufRead&gt;::fill_buf (1 samples, 0.06%)</title><rect x="3.2222%" y="837" width="0.0556%" height="15" fill="rgb(218,138,4)" fg:x="58" fg:w="1"/><text x="3.4722%" y="847.50"></text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::fill_buf (1 samples, 0.06%)</title><rect x="3.2222%" y="821" width="0.0556%" height="15" fill="rgb(250,191,14)" fg:x="58" fg:w="1"/><text x="3.4722%" y="831.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;mut R&gt;::read_buf (1 samples, 0.06%)</title><rect x="3.2222%" y="805" width="0.0556%" height="15" fill="rgb(239,60,40)" fg:x="58" fg:w="1"/><text x="3.4722%" y="815.50"></text></g><g><title>[anon] (1 samples, 0.06%)</title><rect x="3.2778%" y="901" width="0.0556%" height="15" fill="rgb(206,27,48)" fg:x="59" fg:w="1"/><text x="3.5278%" y="911.50"></text></g><g><title>[libc.so.6] (1 samples, 0.06%)</title><rect x="3.2778%" y="885" width="0.0556%" height="15" fill="rgb(225,35,8)" fg:x="59" fg:w="1"/><text x="3.5278%" y="895.50"></text></g><g><title>[ld-linux-x86-64.so.2] (6 samples, 0.33%)</title><rect x="3.3333%" y="901" width="0.3333%" height="15" fill="rgb(250,213,24)" fg:x="60" fg:w="6"/><text x="3.5833%" y="911.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.06%)</title><rect x="3.6111%" y="885" width="0.0556%" height="15" fill="rgb(247,123,22)" fg:x="65" fg:w="1"/><text x="3.8611%" y="895.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.06%)</title><rect x="3.6111%" y="869" width="0.0556%" height="15" fill="rgb(231,138,38)" fg:x="65" fg:w="1"/><text x="3.8611%" y="879.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.06%)</title><rect x="3.6111%" y="853" width="0.0556%" height="15" fill="rgb(231,145,46)" fg:x="65" fg:w="1"/><text x="3.8611%" y="863.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.06%)</title><rect x="3.6111%" y="837" width="0.0556%" height="15" fill="rgb(251,118,11)" fg:x="65" fg:w="1"/><text x="3.8611%" y="847.50"></text></g><g><title>_dl_catch_exception (1 samples, 0.06%)</title><rect x="3.6111%" y="821" width="0.0556%" height="15" fill="rgb(217,147,25)" fg:x="65" fg:w="1"/><text x="3.8611%" y="831.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.06%)</title><rect x="3.6111%" y="805" width="0.0556%" height="15" fill="rgb(247,81,37)" fg:x="65" fg:w="1"/><text x="3.8611%" y="815.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.06%)</title><rect x="3.6111%" y="789" width="0.0556%" height="15" fill="rgb(209,12,38)" fg:x="65" fg:w="1"/><text x="3.8611%" y="799.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.06%)</title><rect x="3.6111%" y="773" width="0.0556%" height="15" fill="rgb(227,1,9)" fg:x="65" fg:w="1"/><text x="3.8611%" y="783.50"></text></g><g><title>[libc.so.6] (2 samples, 0.11%)</title><rect x="3.6667%" y="901" width="0.1111%" height="15" fill="rgb(248,47,43)" fg:x="66" fg:w="2"/><text x="3.9167%" y="911.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.11%)</title><rect x="3.6667%" y="885" width="0.1111%" height="15" fill="rgb(221,10,30)" fg:x="66" fg:w="2"/><text x="3.9167%" y="895.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.28%)</title><rect x="3.7778%" y="885" width="0.2778%" height="15" fill="rgb(210,229,1)" fg:x="68" fg:w="5"/><text x="4.0278%" y="895.50"></text></g><g><title>core::mem::drop (5 samples, 0.28%)</title><rect x="3.7778%" y="869" width="0.2778%" height="15" fill="rgb(222,148,37)" fg:x="68" fg:w="5"/><text x="4.0278%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;u32,alloc::collections::btree::set_val::SetValZST&gt;&gt; (5 samples, 0.28%)</title><rect x="3.7778%" y="853" width="0.2778%" height="15" fill="rgb(234,67,33)" fg:x="68" fg:w="5"/><text x="4.0278%" y="863.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.28%)</title><rect x="3.7778%" y="837" width="0.2778%" height="15" fill="rgb(247,98,35)" fg:x="68" fg:w="5"/><text x="4.0278%" y="847.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (5 samples, 0.28%)</title><rect x="3.7778%" y="821" width="0.2778%" height="15" fill="rgb(247,138,52)" fg:x="68" fg:w="5"/><text x="4.0278%" y="831.50"></text></g><g><title>alloc::collections::btree::navigate::LazyLeafRange&lt;alloc::collections::btree::node::marker::Dying,K,V&gt;::deallocating_end (5 samples, 0.28%)</title><rect x="3.7778%" y="805" width="0.2778%" height="15" fill="rgb(213,79,30)" fg:x="68" fg:w="5"/><text x="4.0278%" y="815.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_end (5 samples, 0.28%)</title><rect x="3.7778%" y="789" width="0.2778%" height="15" fill="rgb(246,177,23)" fg:x="68" fg:w="5"/><text x="4.0278%" y="799.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::deallocate_and_ascend (5 samples, 0.28%)</title><rect x="3.7778%" y="773" width="0.2778%" height="15" fill="rgb(230,62,27)" fg:x="68" fg:w="5"/><text x="4.0278%" y="783.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (5 samples, 0.28%)</title><rect x="3.7778%" y="757" width="0.2778%" height="15" fill="rgb(216,154,8)" fg:x="68" fg:w="5"/><text x="4.0278%" y="767.50"></text></g><g><title>alloc::alloc::dealloc (5 samples, 0.28%)</title><rect x="3.7778%" y="741" width="0.2778%" height="15" fill="rgb(244,35,45)" fg:x="68" fg:w="5"/><text x="4.0278%" y="751.50"></text></g><g><title>&lt;alloc::collections::btree::set::BTreeSet&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (5 samples, 0.28%)</title><rect x="4.0556%" y="885" width="0.2778%" height="15" fill="rgb(251,115,12)" fg:x="73" fg:w="5"/><text x="4.3056%" y="895.50"></text></g><g><title>alloc::collections::btree::set::BTreeSet&lt;T,A&gt;::from_sorted_iter (1 samples, 0.06%)</title><rect x="4.2778%" y="869" width="0.0556%" height="15" fill="rgb(240,54,50)" fg:x="77" fg:w="1"/><text x="4.5278%" y="879.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::bulk_build_from_sorted_iter (1 samples, 0.06%)</title><rect x="4.2778%" y="853" width="0.0556%" height="15" fill="rgb(233,84,52)" fg:x="77" fg:w="1"/><text x="4.5278%" y="863.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::new (1 samples, 0.06%)</title><rect x="4.2778%" y="837" width="0.0556%" height="15" fill="rgb(207,117,47)" fg:x="77" fg:w="1"/><text x="4.5278%" y="847.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::Leaf&gt;::new_leaf (1 samples, 0.06%)</title><rect x="4.2778%" y="821" width="0.0556%" height="15" fill="rgb(249,43,39)" fg:x="77" fg:w="1"/><text x="4.5278%" y="831.50"></text></g><g><title>alloc::collections::btree::node::LeafNode&lt;K,V&gt;::new (1 samples, 0.06%)</title><rect x="4.2778%" y="805" width="0.0556%" height="15" fill="rgb(209,38,44)" fg:x="77" fg:w="1"/><text x="4.5278%" y="815.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::new_uninit_in (1 samples, 0.06%)</title><rect x="4.2778%" y="789" width="0.0556%" height="15" fill="rgb(236,212,23)" fg:x="77" fg:w="1"/><text x="4.5278%" y="799.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::try_new_uninit_in (1 samples, 0.06%)</title><rect x="4.2778%" y="773" width="0.0556%" height="15" fill="rgb(242,79,21)" fg:x="77" fg:w="1"/><text x="4.5278%" y="783.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.06%)</title><rect x="4.2778%" y="757" width="0.0556%" height="15" fill="rgb(211,96,35)" fg:x="77" fg:w="1"/><text x="4.5278%" y="767.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.06%)</title><rect x="4.2778%" y="741" width="0.0556%" height="15" fill="rgb(253,215,40)" fg:x="77" fg:w="1"/><text x="4.5278%" y="751.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.06%)</title><rect x="4.2778%" y="725" width="0.0556%" height="15" fill="rgb(211,81,21)" fg:x="77" fg:w="1"/><text x="4.5278%" y="735.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (5 samples, 0.28%)</title><rect x="4.3333%" y="885" width="0.2778%" height="15" fill="rgb(208,190,38)" fg:x="78" fg:w="5"/><text x="4.5833%" y="895.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (16 samples, 0.89%)</title><rect x="4.6111%" y="885" width="0.8889%" height="15" fill="rgb(235,213,38)" fg:x="83" fg:w="16"/><text x="4.8611%" y="895.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (4 samples, 0.22%)</title><rect x="5.2778%" y="869" width="0.2222%" height="15" fill="rgb(237,122,38)" fg:x="95" fg:w="4"/><text x="5.5278%" y="879.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (4 samples, 0.22%)</title><rect x="5.2778%" y="853" width="0.2222%" height="15" fill="rgb(244,218,35)" fg:x="95" fg:w="4"/><text x="5.5278%" y="863.50"></text></g><g><title>aoc23::day4b::parse_game::_{{closure}} (4 samples, 0.22%)</title><rect x="5.2778%" y="837" width="0.2222%" height="15" fill="rgb(240,68,47)" fg:x="95" fg:w="4"/><text x="5.5278%" y="847.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (4 samples, 0.22%)</title><rect x="5.2778%" y="821" width="0.2222%" height="15" fill="rgb(210,16,53)" fg:x="95" fg:w="4"/><text x="5.5278%" y="831.50"></text></g><g><title>[libc.so.6] (15 samples, 0.83%)</title><rect x="5.5000%" y="885" width="0.8333%" height="15" fill="rgb(235,124,12)" fg:x="99" fg:w="15"/><text x="5.7500%" y="895.50"></text></g><g><title>__rdl_realloc (2 samples, 0.11%)</title><rect x="6.3333%" y="885" width="0.1111%" height="15" fill="rgb(224,169,11)" fg:x="114" fg:w="2"/><text x="6.5833%" y="895.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.06%)</title><rect x="6.4444%" y="885" width="0.0556%" height="15" fill="rgb(250,166,2)" fg:x="116" fg:w="1"/><text x="6.6944%" y="895.50"></text></g><g><title>cfree (1 samples, 0.06%)</title><rect x="6.5000%" y="885" width="0.0556%" height="15" fill="rgb(242,216,29)" fg:x="117" fg:w="1"/><text x="6.7500%" y="895.50"></text></g><g><title>core::num::&lt;impl core::str::traits::FromStr for u32&gt;::from_str (5 samples, 0.28%)</title><rect x="6.5556%" y="885" width="0.2778%" height="15" fill="rgb(230,116,27)" fg:x="118" fg:w="5"/><text x="6.8056%" y="895.50"></text></g><g><title>core::slice::memchr::memchr_aligned (2 samples, 0.11%)</title><rect x="6.8333%" y="885" width="0.1111%" height="15" fill="rgb(228,99,48)" fg:x="123" fg:w="2"/><text x="7.0833%" y="895.50"></text></g><g><title>core::str::converts::from_utf8 (1 samples, 0.06%)</title><rect x="6.9444%" y="885" width="0.0556%" height="15" fill="rgb(253,11,6)" fg:x="125" fg:w="1"/><text x="7.1944%" y="895.50"></text></g><g><title>malloc (4 samples, 0.22%)</title><rect x="7.0000%" y="885" width="0.2222%" height="15" fill="rgb(247,143,39)" fg:x="126" fg:w="4"/><text x="7.2500%" y="895.50"></text></g><g><title>realloc (2 samples, 0.11%)</title><rect x="7.2222%" y="885" width="0.1111%" height="15" fill="rgb(236,97,10)" fg:x="130" fg:w="2"/><text x="7.4722%" y="895.50"></text></g><g><title>std::io::append_to_string (2 samples, 0.11%)</title><rect x="7.3333%" y="885" width="0.1111%" height="15" fill="rgb(233,208,19)" fg:x="132" fg:w="2"/><text x="7.5833%" y="895.50"></text></g><g><title>[unknown] (67 samples, 3.72%)</title><rect x="3.7778%" y="901" width="3.7222%" height="15" fill="rgb(216,164,2)" fg:x="68" fg:w="67"/><text x="4.0278%" y="911.50">[unk..</text></g><g><title>std::sys::unix::memchr::memchr (1 samples, 0.06%)</title><rect x="7.4444%" y="885" width="0.0556%" height="15" fill="rgb(220,129,5)" fg:x="134" fg:w="1"/><text x="7.6944%" y="895.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (1 samples, 0.06%)</title><rect x="7.7778%" y="597" width="0.0556%" height="15" fill="rgb(242,17,10)" fg:x="140" fg:w="1"/><text x="8.0278%" y="607.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (1 samples, 0.06%)</title><rect x="7.7778%" y="581" width="0.0556%" height="15" fill="rgb(242,107,0)" fg:x="140" fg:w="1"/><text x="8.0278%" y="591.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (1 samples, 0.06%)</title><rect x="7.7778%" y="565" width="0.0556%" height="15" fill="rgb(251,28,31)" fg:x="140" fg:w="1"/><text x="8.0278%" y="575.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::RangeInclusive&lt;A&gt;&gt;::next (2 samples, 0.11%)</title><rect x="7.8333%" y="597" width="0.1111%" height="15" fill="rgb(233,223,10)" fg:x="141" fg:w="2"/><text x="8.0833%" y="607.50"></text></g><g><title>&lt;core::ops::range::RangeInclusive&lt;T&gt; as core::iter::range::RangeInclusiveIteratorImpl&gt;::spec_next (2 samples, 0.11%)</title><rect x="7.8333%" y="581" width="0.1111%" height="15" fill="rgb(215,21,27)" fg:x="141" fg:w="2"/><text x="8.0833%" y="591.50"></text></g><g><title>alloc::string::String::new (1 samples, 0.06%)</title><rect x="8.2778%" y="469" width="0.0556%" height="15" fill="rgb(232,23,21)" fg:x="149" fg:w="1"/><text x="8.5278%" y="479.50"></text></g><g><title>core::str::converts::from_utf8 (9 samples, 0.50%)</title><rect x="8.4444%" y="437" width="0.5000%" height="15" fill="rgb(244,5,23)" fg:x="152" fg:w="9"/><text x="8.6944%" y="447.50"></text></g><g><title>core::str::validations::run_utf8_validation (9 samples, 0.50%)</title><rect x="8.4444%" y="421" width="0.5000%" height="15" fill="rgb(226,81,46)" fg:x="152" fg:w="9"/><text x="8.6944%" y="431.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::BufRead&gt;::consume (3 samples, 0.17%)</title><rect x="9.1667%" y="405" width="0.1667%" height="15" fill="rgb(247,70,30)" fg:x="165" fg:w="3"/><text x="9.4167%" y="415.50"></text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::consume (3 samples, 0.17%)</title><rect x="9.1667%" y="389" width="0.1667%" height="15" fill="rgb(212,68,19)" fg:x="165" fg:w="3"/><text x="9.4167%" y="399.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::BufRead&gt;::fill_buf (2 samples, 0.11%)</title><rect x="9.3333%" y="405" width="0.1111%" height="15" fill="rgb(240,187,13)" fg:x="168" fg:w="2"/><text x="9.5833%" y="415.50"></text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::fill_buf (2 samples, 0.11%)</title><rect x="9.3333%" y="389" width="0.1111%" height="15" fill="rgb(223,113,26)" fg:x="168" fg:w="2"/><text x="9.5833%" y="399.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;mut R&gt;::read_buf (1 samples, 0.06%)</title><rect x="9.3889%" y="373" width="0.0556%" height="15" fill="rgb(206,192,2)" fg:x="169" fg:w="1"/><text x="9.6389%" y="383.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read_buf (1 samples, 0.06%)</title><rect x="9.3889%" y="357" width="0.0556%" height="15" fill="rgb(241,108,4)" fg:x="169" fg:w="1"/><text x="9.6389%" y="367.50"></text></g><g><title>&lt;&amp;std::fs::File as std::io::Read&gt;::read_buf (1 samples, 0.06%)</title><rect x="9.3889%" y="341" width="0.0556%" height="15" fill="rgb(247,173,49)" fg:x="169" fg:w="1"/><text x="9.6389%" y="351.50"></text></g><g><title>std::sys::unix::fs::File::read_buf (1 samples, 0.06%)</title><rect x="9.3889%" y="325" width="0.0556%" height="15" fill="rgb(224,114,35)" fg:x="169" fg:w="1"/><text x="9.6389%" y="335.50"></text></g><g><title>std::sys::unix::fd::FileDesc::read_buf (1 samples, 0.06%)</title><rect x="9.3889%" y="309" width="0.0556%" height="15" fill="rgb(245,159,27)" fg:x="169" fg:w="1"/><text x="9.6389%" y="319.50"></text></g><g><title>read (1 samples, 0.06%)</title><rect x="9.3889%" y="293" width="0.0556%" height="15" fill="rgb(245,172,44)" fg:x="169" fg:w="1"/><text x="9.6389%" y="303.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (1 samples, 0.06%)</title><rect x="9.7222%" y="277" width="0.0556%" height="15" fill="rgb(236,23,11)" fg:x="175" fg:w="1"/><text x="9.9722%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (11 samples, 0.61%)</title><rect x="9.6111%" y="293" width="0.6111%" height="15" fill="rgb(205,117,38)" fg:x="173" fg:w="11"/><text x="9.8611%" y="303.50"></text></g><g><title>malloc (8 samples, 0.44%)</title><rect x="9.7778%" y="277" width="0.4444%" height="15" fill="rgb(237,72,25)" fg:x="176" fg:w="8"/><text x="10.0278%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (15 samples, 0.83%)</title><rect x="9.5000%" y="357" width="0.8333%" height="15" fill="rgb(244,70,9)" fg:x="171" fg:w="15"/><text x="9.7500%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (15 samples, 0.83%)</title><rect x="9.5000%" y="341" width="0.8333%" height="15" fill="rgb(217,125,39)" fg:x="171" fg:w="15"/><text x="9.7500%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (14 samples, 0.78%)</title><rect x="9.5556%" y="325" width="0.7778%" height="15" fill="rgb(235,36,10)" fg:x="172" fg:w="14"/><text x="9.8056%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (14 samples, 0.78%)</title><rect x="9.5556%" y="309" width="0.7778%" height="15" fill="rgb(251,123,47)" fg:x="172" fg:w="14"/><text x="9.8056%" y="319.50"></text></g><g><title>core::cmp::max (2 samples, 0.11%)</title><rect x="10.2222%" y="293" width="0.1111%" height="15" fill="rgb(221,13,13)" fg:x="184" fg:w="2"/><text x="10.4722%" y="303.50"></text></g><g><title>core::cmp::Ord::max (2 samples, 0.11%)</title><rect x="10.2222%" y="277" width="0.1111%" height="15" fill="rgb(238,131,9)" fg:x="184" fg:w="2"/><text x="10.4722%" y="287.50"></text></g><g><title>core::cmp::max_by (2 samples, 0.11%)</title><rect x="10.2222%" y="261" width="0.1111%" height="15" fill="rgb(211,50,8)" fg:x="184" fg:w="2"/><text x="10.4722%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (20 samples, 1.11%)</title><rect x="9.4444%" y="405" width="1.1111%" height="15" fill="rgb(245,182,24)" fg:x="170" fg:w="20"/><text x="9.6944%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (20 samples, 1.11%)</title><rect x="9.4444%" y="389" width="1.1111%" height="15" fill="rgb(242,14,37)" fg:x="170" fg:w="20"/><text x="9.6944%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (20 samples, 1.11%)</title><rect x="9.4444%" y="373" width="1.1111%" height="15" fill="rgb(246,228,12)" fg:x="170" fg:w="20"/><text x="9.6944%" y="383.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (4 samples, 0.22%)</title><rect x="10.3333%" y="357" width="0.2222%" height="15" fill="rgb(213,55,15)" fg:x="186" fg:w="4"/><text x="10.5833%" y="367.50"></text></g><g><title>[libc.so.6] (4 samples, 0.22%)</title><rect x="10.3333%" y="341" width="0.2222%" height="15" fill="rgb(209,9,3)" fg:x="186" fg:w="4"/><text x="10.5833%" y="351.50"></text></g><g><title>&lt;std::io::Lines&lt;B&gt; as core::iter::traits::iterator::Iterator&gt;::next (58 samples, 3.22%)</title><rect x="8.0000%" y="485" width="3.2222%" height="15" fill="rgb(230,59,30)" fg:x="144" fg:w="58"/><text x="8.2500%" y="495.50">&lt;st..</text></g><g><title>std::io::BufRead::read_line (52 samples, 2.89%)</title><rect x="8.3333%" y="469" width="2.8889%" height="15" fill="rgb(209,121,21)" fg:x="150" fg:w="52"/><text x="8.5833%" y="479.50">st..</text></g><g><title>std::io::append_to_string (52 samples, 2.89%)</title><rect x="8.3333%" y="453" width="2.8889%" height="15" fill="rgb(220,109,13)" fg:x="150" fg:w="52"/><text x="8.5833%" y="463.50">st..</text></g><g><title>std::io::BufRead::read_line::_{{closure}} (41 samples, 2.28%)</title><rect x="8.9444%" y="437" width="2.2778%" height="15" fill="rgb(232,18,1)" fg:x="161" fg:w="41"/><text x="9.1944%" y="447.50">s..</text></g><g><title>std::io::read_until (41 samples, 2.28%)</title><rect x="8.9444%" y="421" width="2.2778%" height="15" fill="rgb(215,41,42)" fg:x="161" fg:w="41"/><text x="9.1944%" y="431.50">s..</text></g><g><title>std::sys_common::memchr::memchr (12 samples, 0.67%)</title><rect x="10.5556%" y="405" width="0.6667%" height="15" fill="rgb(224,123,36)" fg:x="190" fg:w="12"/><text x="10.8056%" y="415.50"></text></g><g><title>std::sys::unix::memchr::memchr (12 samples, 0.67%)</title><rect x="10.5556%" y="389" width="0.6667%" height="15" fill="rgb(240,125,3)" fg:x="190" fg:w="12"/><text x="10.8056%" y="399.50"></text></g><g><title>[libc.so.6] (11 samples, 0.61%)</title><rect x="10.6111%" y="373" width="0.6111%" height="15" fill="rgb(205,98,50)" fg:x="191" fg:w="11"/><text x="10.8611%" y="383.50"></text></g><g><title>&lt;F as core::str::pattern::MultiCharEq&gt;::matches (46 samples, 2.56%)</title><rect x="18.6667%" y="197" width="2.5556%" height="15" fill="rgb(205,185,37)" fg:x="336" fg:w="46"/><text x="18.9167%" y="207.50">&lt;F..</text></g><g><title>&lt;core::str::IsWhitespace as core::ops::function::FnMut&lt;(char,)&gt;&gt;::call_mut (46 samples, 2.56%)</title><rect x="18.6667%" y="181" width="2.5556%" height="15" fill="rgb(238,207,15)" fg:x="336" fg:w="46"/><text x="18.9167%" y="191.50">&lt;c..</text></g><g><title>&lt;core::str::IsWhitespace as core::ops::function::Fn&lt;(char,)&gt;&gt;::call (46 samples, 2.56%)</title><rect x="18.6667%" y="165" width="2.5556%" height="15" fill="rgb(213,199,42)" fg:x="336" fg:w="46"/><text x="18.9167%" y="175.50">&lt;c..</text></g><g><title>core::char::methods::&lt;impl char&gt;::is_whitespace (46 samples, 2.56%)</title><rect x="18.6667%" y="149" width="2.5556%" height="15" fill="rgb(235,201,11)" fg:x="336" fg:w="46"/><text x="18.9167%" y="159.50">co..</text></g><g><title>&lt;core::str::iter::Split&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (157 samples, 8.72%)</title><rect x="17.3333%" y="277" width="8.7222%" height="15" fill="rgb(207,46,11)" fg:x="312" fg:w="157"/><text x="17.5833%" y="287.50">&lt;core::str::..</text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next (157 samples, 8.72%)</title><rect x="17.3333%" y="261" width="8.7222%" height="15" fill="rgb(241,35,35)" fg:x="312" fg:w="157"/><text x="17.5833%" y="271.50">core::str::i..</text></g><g><title>&lt;core::str::pattern::CharPredicateSearcher&lt;F&gt; as core::str::pattern::Searcher&gt;::next_match (133 samples, 7.39%)</title><rect x="18.6667%" y="245" width="7.3889%" height="15" fill="rgb(243,32,47)" fg:x="336" fg:w="133"/><text x="18.9167%" y="255.50">&lt;core::str..</text></g><g><title>core::str::pattern::Searcher::next_match (133 samples, 7.39%)</title><rect x="18.6667%" y="229" width="7.3889%" height="15" fill="rgb(247,202,23)" fg:x="336" fg:w="133"/><text x="18.9167%" y="239.50">core::str:..</text></g><g><title>&lt;core::str::pattern::MultiCharEqSearcher&lt;C&gt; as core::str::pattern::Searcher&gt;::next (133 samples, 7.39%)</title><rect x="18.6667%" y="213" width="7.3889%" height="15" fill="rgb(219,102,11)" fg:x="336" fg:w="133"/><text x="18.9167%" y="223.50">&lt;core::str..</text></g><g><title>&lt;core::str::iter::CharIndices as core::iter::traits::iterator::Iterator&gt;::next (87 samples, 4.83%)</title><rect x="21.2222%" y="197" width="4.8333%" height="15" fill="rgb(243,110,44)" fg:x="382" fg:w="87"/><text x="21.4722%" y="207.50">&lt;core:..</text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (59 samples, 3.28%)</title><rect x="22.7778%" y="181" width="3.2778%" height="15" fill="rgb(222,74,54)" fg:x="410" fg:w="59"/><text x="23.0278%" y="191.50">&lt;co..</text></g><g><title>core::str::validations::next_code_point (59 samples, 3.28%)</title><rect x="22.7778%" y="165" width="3.2778%" height="15" fill="rgb(216,99,12)" fg:x="410" fg:w="59"/><text x="23.0278%" y="175.50">cor..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 samples, 0.72%)</title><rect x="25.3333%" y="149" width="0.7222%" height="15" fill="rgb(226,22,26)" fg:x="456" fg:w="13"/><text x="25.5833%" y="159.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (12 samples, 0.67%)</title><rect x="25.3889%" y="133" width="0.6667%" height="15" fill="rgb(217,163,10)" fg:x="457" fg:w="12"/><text x="25.6389%" y="143.50"></text></g><g><title>&lt;core::str::iter::SplitWhitespace as core::iter::traits::iterator::Iterator&gt;::next (169 samples, 9.39%)</title><rect x="17.2778%" y="341" width="9.3889%" height="15" fill="rgb(213,25,53)" fg:x="311" fg:w="169"/><text x="17.5278%" y="351.50">&lt;core::str::i..</text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (169 samples, 9.39%)</title><rect x="17.2778%" y="325" width="9.3889%" height="15" fill="rgb(252,105,26)" fg:x="311" fg:w="169"/><text x="17.5278%" y="335.50">&lt;core::iter::..</text></g><g><title>core::iter::traits::iterator::Iterator::find (169 samples, 9.39%)</title><rect x="17.2778%" y="309" width="9.3889%" height="15" fill="rgb(220,39,43)" fg:x="311" fg:w="169"/><text x="17.5278%" y="319.50">core::iter::t..</text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (169 samples, 9.39%)</title><rect x="17.2778%" y="293" width="9.3889%" height="15" fill="rgb(229,68,48)" fg:x="311" fg:w="169"/><text x="17.5278%" y="303.50">core::iter::t..</text></g><g><title>core::iter::traits::iterator::Iterator::find::check::_{{closure}} (11 samples, 0.61%)</title><rect x="26.0556%" y="277" width="0.6111%" height="15" fill="rgb(252,8,32)" fg:x="469" fg:w="11"/><text x="26.3056%" y="287.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (11 samples, 0.61%)</title><rect x="26.0556%" y="261" width="0.6111%" height="15" fill="rgb(223,20,43)" fg:x="469" fg:w="11"/><text x="26.3056%" y="271.50"></text></g><g><title>&lt;core::str::IsNotEmpty as core::ops::function::FnMut&lt;(&amp;&amp;str,)&gt;&gt;::call_mut (11 samples, 0.61%)</title><rect x="26.0556%" y="245" width="0.6111%" height="15" fill="rgb(229,81,49)" fg:x="469" fg:w="11"/><text x="26.3056%" y="255.50"></text></g><g><title>&lt;core::str::IsNotEmpty as core::ops::function::Fn&lt;(&amp;&amp;str,)&gt;&gt;::call (11 samples, 0.61%)</title><rect x="26.0556%" y="229" width="0.6111%" height="15" fill="rgb(236,28,36)" fg:x="469" fg:w="11"/><text x="26.3056%" y="239.50"></text></g><g><title>core::str::&lt;impl str&gt;::is_empty (11 samples, 0.61%)</title><rect x="26.0556%" y="213" width="0.6111%" height="15" fill="rgb(249,185,26)" fg:x="469" fg:w="11"/><text x="26.3056%" y="223.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;::reborrow (14 samples, 0.78%)</title><rect x="29.3889%" y="245" width="0.7778%" height="15" fill="rgb(249,174,33)" fg:x="529" fg:w="14"/><text x="29.6389%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (62 samples, 3.44%)</title><rect x="46.1111%" y="197" width="3.4444%" height="15" fill="rgb(233,201,37)" fg:x="830" fg:w="62"/><text x="46.3611%" y="207.50">&lt;co..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (62 samples, 3.44%)</title><rect x="46.1111%" y="181" width="3.4444%" height="15" fill="rgb(221,78,26)" fg:x="830" fg:w="62"/><text x="46.3611%" y="191.50">&lt;co..</text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (50 samples, 2.78%)</title><rect x="46.7778%" y="165" width="2.7778%" height="15" fill="rgb(250,127,30)" fg:x="842" fg:w="50"/><text x="47.0278%" y="175.50">&lt;c..</text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,Type&gt;::keys (11 samples, 0.61%)</title><rect x="49.5556%" y="197" width="0.6111%" height="15" fill="rgb(230,49,44)" fg:x="892" fg:w="11"/><text x="49.8056%" y="207.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (503 samples, 27.94%)</title><rect x="30.1667%" y="245" width="27.9444%" height="15" fill="rgb(229,67,23)" fg:x="543" fg:w="503"/><text x="30.4167%" y="255.50">alloc::collections::btree::search::&lt;impl allo..</text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::search_node (472 samples, 26.22%)</title><rect x="31.8889%" y="229" width="26.2222%" height="15" fill="rgb(249,83,47)" fg:x="574" fg:w="472"/><text x="32.1389%" y="239.50">alloc::collections::btree::search::&lt;impl a..</text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (472 samples, 26.22%)</title><rect x="31.8889%" y="213" width="26.2222%" height="15" fill="rgb(215,43,3)" fg:x="574" fg:w="472"/><text x="32.1389%" y="223.50">alloc::collections::btree::search::&lt;impl a..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for u32&gt;::cmp (143 samples, 7.94%)</title><rect x="50.1667%" y="197" width="7.9444%" height="15" fill="rgb(238,154,13)" fg:x="903" fg:w="143"/><text x="50.4167%" y="207.50">core::cmp::..</text></g><g><title>alloc::collections::btree::set::BTreeSet&lt;T,A&gt;::contains (549 samples, 30.50%)</title><rect x="29.0000%" y="293" width="30.5000%" height="15" fill="rgb(219,56,2)" fg:x="522" fg:w="549"/><text x="29.2500%" y="303.50">alloc::collections::btree::set::BTreeSet&lt;T,A&gt;::co..</text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::contains_key (549 samples, 30.50%)</title><rect x="29.0000%" y="277" width="30.5000%" height="15" fill="rgb(233,0,4)" fg:x="522" fg:w="549"/><text x="29.2500%" y="287.50">alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::..</text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::get (549 samples, 30.50%)</title><rect x="29.0000%" y="261" width="30.5000%" height="15" fill="rgb(235,30,7)" fg:x="522" fg:w="549"/><text x="29.2500%" y="271.50">alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::..</text></g><g><title>core::option::Option&lt;T&gt;::as_ref (25 samples, 1.39%)</title><rect x="58.1111%" y="245" width="1.3889%" height="15" fill="rgb(250,79,13)" fg:x="1046" fg:w="25"/><text x="58.3611%" y="255.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (17 samples, 0.94%)</title><rect x="65.1111%" y="245" width="0.9444%" height="15" fill="rgb(211,146,34)" fg:x="1172" fg:w="17"/><text x="65.3611%" y="255.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (5 samples, 0.28%)</title><rect x="65.7778%" y="229" width="0.2778%" height="15" fill="rgb(228,22,38)" fg:x="1184" fg:w="5"/><text x="66.0278%" y="239.50"></text></g><g><title>&lt;u32 as core::ops::arith::Add&gt;::add (2 samples, 0.11%)</title><rect x="66.0556%" y="245" width="0.1111%" height="15" fill="rgb(235,168,5)" fg:x="1189" fg:w="2"/><text x="66.3056%" y="255.50"></text></g><g><title>&lt;u32 as core::ops::arith::Mul&gt;::mul (8 samples, 0.44%)</title><rect x="66.1667%" y="245" width="0.4444%" height="15" fill="rgb(221,155,16)" fg:x="1191" fg:w="8"/><text x="66.4167%" y="255.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::to_digit (12 samples, 0.67%)</title><rect x="66.6111%" y="245" width="0.6667%" height="15" fill="rgb(215,215,53)" fg:x="1199" fg:w="12"/><text x="66.8611%" y="255.50"></text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_sub (1 samples, 0.06%)</title><rect x="67.2222%" y="229" width="0.0556%" height="15" fill="rgb(223,4,10)" fg:x="1210" fg:w="1"/><text x="67.4722%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::count::to_usize::_{{closure}} (695 samples, 38.61%)</title><rect x="28.7222%" y="325" width="38.6111%" height="15" fill="rgb(234,103,6)" fg:x="517" fg:w="695"/><text x="28.9722%" y="335.50">&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::trait..</text></g><g><title>aoc23::day4b::parse_game::_{{closure}} (695 samples, 38.61%)</title><rect x="28.7222%" y="309" width="38.6111%" height="15" fill="rgb(227,97,0)" fg:x="517" fg:w="695"/><text x="28.9722%" y="319.50">aoc23::day4b::parse_game::_{{closure}}</text></g><g><title>core::str::&lt;impl str&gt;::parse (141 samples, 7.83%)</title><rect x="59.5000%" y="293" width="7.8333%" height="15" fill="rgb(234,150,53)" fg:x="1071" fg:w="141"/><text x="59.7500%" y="303.50">core::str::..</text></g><g><title>core::num::&lt;impl core::str::traits::FromStr for u32&gt;::from_str (141 samples, 7.83%)</title><rect x="59.5000%" y="277" width="7.8333%" height="15" fill="rgb(228,201,54)" fg:x="1071" fg:w="141"/><text x="59.7500%" y="287.50">core::num::..</text></g><g><title>core::num::from_str_radix (138 samples, 7.67%)</title><rect x="59.6667%" y="261" width="7.6667%" height="15" fill="rgb(222,22,37)" fg:x="1074" fg:w="138"/><text x="59.9167%" y="271.50">core::num:..</text></g><g><title>core::num::can_not_overflow (1 samples, 0.06%)</title><rect x="67.2778%" y="245" width="0.0556%" height="15" fill="rgb(237,53,32)" fg:x="1211" fg:w="1"/><text x="67.5278%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::count (1,029 samples, 57.17%)</title><rect x="11.6667%" y="421" width="57.1667%" height="15" fill="rgb(233,25,53)" fg:x="210" fg:w="1029"/><text x="11.9167%" y="431.50">&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::count</text></g><g><title>core::iter::traits::iterator::Iterator::sum (1,026 samples, 57.00%)</title><rect x="11.8333%" y="405" width="57.0000%" height="15" fill="rgb(210,40,34)" fg:x="213" fg:w="1026"/><text x="12.0833%" y="415.50">core::iter::traits::iterator::Iterator::sum</text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (1,026 samples, 57.00%)</title><rect x="11.8333%" y="389" width="57.0000%" height="15" fill="rgb(241,220,44)" fg:x="213" fg:w="1026"/><text x="12.0833%" y="399.50">&lt;usize as core::iter::traits::accum::Sum&gt;::sum</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1,026 samples, 57.00%)</title><rect x="11.8333%" y="373" width="57.0000%" height="15" fill="rgb(235,28,35)" fg:x="213" fg:w="1026"/><text x="12.0833%" y="383.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>core::iter::traits::iterator::Iterator::fold (928 samples, 51.56%)</title><rect x="17.2778%" y="357" width="51.5556%" height="15" fill="rgb(210,56,17)" fg:x="311" fg:w="928"/><text x="17.5278%" y="367.50">core::iter::traits::iterator::Iterator::fold</text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (759 samples, 42.17%)</title><rect x="26.6667%" y="341" width="42.1667%" height="15" fill="rgb(224,130,29)" fg:x="480" fg:w="759"/><text x="26.9167%" y="351.50">core::iter::adapters::map::map_fold::_{{closure}}</text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum::_{{closure}} (27 samples, 1.50%)</title><rect x="67.3333%" y="325" width="1.5000%" height="15" fill="rgb(235,212,8)" fg:x="1212" fg:w="27"/><text x="67.5833%" y="335.50"></text></g><g><title>&lt;I as core::iter::traits::collect::IntoIterator&gt;::into_iter (8 samples, 0.44%)</title><rect x="68.8889%" y="389" width="0.4444%" height="15" fill="rgb(223,33,50)" fg:x="1240" fg:w="8"/><text x="69.1389%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::peekable::Peekable&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.17%)</title><rect x="69.8333%" y="325" width="0.1667%" height="15" fill="rgb(219,149,13)" fg:x="1257" fg:w="3"/><text x="70.0833%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::dedup_sorted_iter::DedupSortedIter&lt;K,V,I&gt; as core::iter::traits::iterator::Iterator&gt;::next (9 samples, 0.50%)</title><rect x="69.7778%" y="341" width="0.5000%" height="15" fill="rgb(250,156,29)" fg:x="1256" fg:w="9"/><text x="70.0278%" y="351.50"></text></g><g><title>core::iter::adapters::peekable::Peekable&lt;I&gt;::peek (5 samples, 0.28%)</title><rect x="70.0000%" y="325" width="0.2778%" height="15" fill="rgb(216,193,19)" fg:x="1260" fg:w="5"/><text x="70.2500%" y="335.50"></text></g><g><title>core::option::Option&lt;T&gt;::get_or_insert_with (5 samples, 0.28%)</title><rect x="70.0000%" y="309" width="0.2778%" height="15" fill="rgb(216,135,14)" fg:x="1260" fg:w="5"/><text x="70.2500%" y="319.50"></text></g><g><title>core::iter::adapters::peekable::Peekable&lt;I&gt;::peek::_{{closure}} (5 samples, 0.28%)</title><rect x="70.0000%" y="293" width="0.2778%" height="15" fill="rgb(241,47,5)" fg:x="1260" fg:w="5"/><text x="70.2500%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.28%)</title><rect x="70.0000%" y="277" width="0.2778%" height="15" fill="rgb(233,42,35)" fg:x="1260" fg:w="5"/><text x="70.2500%" y="287.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.28%)</title><rect x="70.0000%" y="261" width="0.2778%" height="15" fill="rgb(231,13,6)" fg:x="1260" fg:w="5"/><text x="70.2500%" y="271.50"></text></g><g><title>core::ptr::read (2 samples, 0.11%)</title><rect x="70.1667%" y="245" width="0.1111%" height="15" fill="rgb(207,181,40)" fg:x="1263" fg:w="2"/><text x="70.4167%" y="255.50"></text></g><g><title>alloc::collections::btree::fix::&lt;impl alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::fix_right_border_of_plentiful (1 samples, 0.06%)</title><rect x="70.2778%" y="341" width="0.0556%" height="15" fill="rgb(254,173,49)" fg:x="1265" fg:w="1"/><text x="70.5278%" y="351.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;::len (3 samples, 0.17%)</title><rect x="70.3333%" y="341" width="0.1667%" height="15" fill="rgb(221,1,38)" fg:x="1266" fg:w="3"/><text x="70.5833%" y="351.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;::push (17 samples, 0.94%)</title><rect x="70.5000%" y="341" width="0.9444%" height="15" fill="rgb(206,124,46)" fg:x="1269" fg:w="17"/><text x="70.7500%" y="351.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::write (15 samples, 0.83%)</title><rect x="70.6111%" y="325" width="0.8333%" height="15" fill="rgb(249,21,11)" fg:x="1271" fg:w="15"/><text x="70.8611%" y="335.50"></text></g><g><title>__rdl_dealloc (1 samples, 0.06%)</title><rect x="71.4444%" y="165" width="0.0556%" height="15" fill="rgb(222,201,40)" fg:x="1286" fg:w="1"/><text x="71.6944%" y="175.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (1 samples, 0.06%)</title><rect x="71.4444%" y="149" width="0.0556%" height="15" fill="rgb(235,61,29)" fg:x="1286" fg:w="1"/><text x="71.6944%" y="159.50"></text></g><g><title>alloc::collections::btree::append::&lt;impl alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::bulk_push (47 samples, 2.61%)</title><rect x="69.4444%" y="357" width="2.6111%" height="15" fill="rgb(219,207,3)" fg:x="1250" fg:w="47"/><text x="69.6944%" y="367.50">al..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::dedup_sorted_iter::DedupSortedIter&lt;u32,alloc::collections::btree::set_val::SetValZST,core::iter::adapters::map::Map&lt;alloc::vec::into_iter::IntoIter&lt;u32&gt;,alloc::collections::btree::set::BTreeSet&lt;u32&gt;::from_sorted_iter&lt;alloc::vec::into_iter::IntoIter&lt;u32&gt;&gt;::{{closure}}&gt;&gt;&gt; (11 samples, 0.61%)</title><rect x="71.4444%" y="341" width="0.6111%" height="15" fill="rgb(222,56,46)" fg:x="1286" fg:w="11"/><text x="71.6944%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::peekable::Peekable&lt;core::iter::adapters::map::Map&lt;alloc::vec::into_iter::IntoIter&lt;u32&gt;,alloc::collections::btree::set::BTreeSet&lt;u32&gt;::from_sorted_iter&lt;alloc::vec::into_iter::IntoIter&lt;u32&gt;&gt;::{{closure}}&gt;&gt;&gt; (11 samples, 0.61%)</title><rect x="71.4444%" y="325" width="0.6111%" height="15" fill="rgb(239,76,54)" fg:x="1286" fg:w="11"/><text x="71.6944%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::map::Map&lt;alloc::vec::into_iter::IntoIter&lt;u32&gt;,alloc::collections::btree::set::BTreeSet&lt;u32&gt;::from_sorted_iter&lt;alloc::vec::into_iter::IntoIter&lt;u32&gt;&gt;::{{closure}}&gt;&gt; (11 samples, 0.61%)</title><rect x="71.4444%" y="309" width="0.6111%" height="15" fill="rgb(231,124,27)" fg:x="1286" fg:w="11"/><text x="71.6944%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;u32&gt;&gt; (11 samples, 0.61%)</title><rect x="71.4444%" y="293" width="0.6111%" height="15" fill="rgb(249,195,6)" fg:x="1286" fg:w="11"/><text x="71.6944%" y="303.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (11 samples, 0.61%)</title><rect x="71.4444%" y="277" width="0.6111%" height="15" fill="rgb(237,174,47)" fg:x="1286" fg:w="11"/><text x="71.6944%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;u32,alloc::alloc::Global&gt;&gt; (11 samples, 0.61%)</title><rect x="71.4444%" y="261" width="0.6111%" height="15" fill="rgb(206,201,31)" fg:x="1286" fg:w="11"/><text x="71.6944%" y="271.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (11 samples, 0.61%)</title><rect x="71.4444%" y="245" width="0.6111%" height="15" fill="rgb(231,57,52)" fg:x="1286" fg:w="11"/><text x="71.6944%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u32&gt;&gt; (11 samples, 0.61%)</title><rect x="71.4444%" y="229" width="0.6111%" height="15" fill="rgb(248,177,22)" fg:x="1286" fg:w="11"/><text x="71.6944%" y="239.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (11 samples, 0.61%)</title><rect x="71.4444%" y="213" width="0.6111%" height="15" fill="rgb(215,211,37)" fg:x="1286" fg:w="11"/><text x="71.6944%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (11 samples, 0.61%)</title><rect x="71.4444%" y="197" width="0.6111%" height="15" fill="rgb(241,128,51)" fg:x="1286" fg:w="11"/><text x="71.6944%" y="207.50"></text></g><g><title>alloc::alloc::dealloc (11 samples, 0.61%)</title><rect x="71.4444%" y="181" width="0.6111%" height="15" fill="rgb(227,165,31)" fg:x="1286" fg:w="11"/><text x="71.6944%" y="191.50"></text></g><g><title>cfree (10 samples, 0.56%)</title><rect x="71.5000%" y="165" width="0.5556%" height="15" fill="rgb(228,167,24)" fg:x="1287" fg:w="10"/><text x="71.7500%" y="175.50"></text></g><g><title>[libc.so.6] (3 samples, 0.17%)</title><rect x="71.8889%" y="149" width="0.1667%" height="15" fill="rgb(228,143,12)" fg:x="1294" fg:w="3"/><text x="72.1389%" y="159.50"></text></g><g><title>alloc::collections::btree::dedup_sorted_iter::DedupSortedIter&lt;K,V,I&gt;::new (2 samples, 0.11%)</title><rect x="72.0556%" y="357" width="0.1111%" height="15" fill="rgb(249,149,8)" fg:x="1297" fg:w="2"/><text x="72.3056%" y="367.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::new_uninit_in (5 samples, 0.28%)</title><rect x="72.1667%" y="309" width="0.2778%" height="15" fill="rgb(243,35,44)" fg:x="1299" fg:w="5"/><text x="72.4167%" y="319.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::try_new_uninit_in (5 samples, 0.28%)</title><rect x="72.1667%" y="293" width="0.2778%" height="15" fill="rgb(246,89,9)" fg:x="1299" fg:w="5"/><text x="72.4167%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (5 samples, 0.28%)</title><rect x="72.1667%" y="277" width="0.2778%" height="15" fill="rgb(233,213,13)" fg:x="1299" fg:w="5"/><text x="72.4167%" y="287.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (5 samples, 0.28%)</title><rect x="72.1667%" y="261" width="0.2778%" height="15" fill="rgb(233,141,41)" fg:x="1299" fg:w="5"/><text x="72.4167%" y="271.50"></text></g><g><title>alloc::alloc::alloc (5 samples, 0.28%)</title><rect x="72.1667%" y="245" width="0.2778%" height="15" fill="rgb(239,167,4)" fg:x="1299" fg:w="5"/><text x="72.4167%" y="255.50"></text></g><g><title>malloc (5 samples, 0.28%)</title><rect x="72.1667%" y="229" width="0.2778%" height="15" fill="rgb(209,217,16)" fg:x="1299" fg:w="5"/><text x="72.4167%" y="239.50"></text></g><g><title>alloc::collections::btree::set::BTreeSet&lt;T,A&gt;::from_sorted_iter (58 samples, 3.22%)</title><rect x="69.3333%" y="389" width="3.2222%" height="15" fill="rgb(219,88,35)" fg:x="1248" fg:w="58"/><text x="69.5833%" y="399.50">all..</text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::bulk_build_from_sorted_iter (57 samples, 3.17%)</title><rect x="69.3889%" y="373" width="3.1667%" height="15" fill="rgb(220,193,23)" fg:x="1249" fg:w="57"/><text x="69.6389%" y="383.50">all..</text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::new (7 samples, 0.39%)</title><rect x="72.1667%" y="357" width="0.3889%" height="15" fill="rgb(230,90,52)" fg:x="1299" fg:w="7"/><text x="72.4167%" y="367.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::Leaf&gt;::new_leaf (7 samples, 0.39%)</title><rect x="72.1667%" y="341" width="0.3889%" height="15" fill="rgb(252,106,19)" fg:x="1299" fg:w="7"/><text x="72.4167%" y="351.50"></text></g><g><title>alloc::collections::btree::node::LeafNode&lt;K,V&gt;::new (7 samples, 0.39%)</title><rect x="72.1667%" y="325" width="0.3889%" height="15" fill="rgb(206,74,20)" fg:x="1299" fg:w="7"/><text x="72.4167%" y="335.50"></text></g><g><title>alloc::collections::btree::node::LeafNode&lt;K,V&gt;::init (2 samples, 0.11%)</title><rect x="72.4444%" y="309" width="0.1111%" height="15" fill="rgb(230,138,44)" fg:x="1304" fg:w="2"/><text x="72.6944%" y="319.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (2 samples, 0.11%)</title><rect x="72.4444%" y="293" width="0.1111%" height="15" fill="rgb(235,182,43)" fg:x="1304" fg:w="2"/><text x="72.6944%" y="303.50"></text></g><g><title>core::ptr::write (2 samples, 0.11%)</title><rect x="72.4444%" y="277" width="0.1111%" height="15" fill="rgb(242,16,51)" fg:x="1304" fg:w="2"/><text x="72.6944%" y="287.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (4 samples, 0.22%)</title><rect x="73.3889%" y="341" width="0.2222%" height="15" fill="rgb(248,9,4)" fg:x="1321" fg:w="4"/><text x="73.6389%" y="351.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (4 samples, 0.22%)</title><rect x="73.3889%" y="325" width="0.2222%" height="15" fill="rgb(210,31,22)" fg:x="1321" fg:w="4"/><text x="73.6389%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (4 samples, 0.22%)</title><rect x="73.3889%" y="309" width="0.2222%" height="15" fill="rgb(239,54,39)" fg:x="1321" fg:w="4"/><text x="73.6389%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::rev::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.33%)</title><rect x="74.8333%" y="325" width="0.3333%" height="15" fill="rgb(230,99,41)" fg:x="1347" fg:w="6"/><text x="75.0833%" y="335.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::double_ended::DoubleEndedIterator for core::ops::range::Range&lt;A&gt;&gt;::next_back (6 samples, 0.33%)</title><rect x="74.8333%" y="309" width="0.3333%" height="15" fill="rgb(253,106,12)" fg:x="1347" fg:w="6"/><text x="75.0833%" y="319.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next_back (6 samples, 0.33%)</title><rect x="74.8333%" y="293" width="0.3333%" height="15" fill="rgb(213,46,41)" fg:x="1347" fg:w="6"/><text x="75.0833%" y="303.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (5 samples, 0.28%)</title><rect x="74.8889%" y="277" width="0.2778%" height="15" fill="rgb(215,133,35)" fg:x="1348" fg:w="5"/><text x="75.1389%" y="287.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (17 samples, 0.94%)</title><rect x="75.1667%" y="325" width="0.9444%" height="15" fill="rgb(213,28,5)" fg:x="1353" fg:w="17"/><text x="75.4167%" y="335.50"></text></g><g><title>core::ops::function::FnMut::call_mut (5 samples, 0.28%)</title><rect x="76.1111%" y="325" width="0.2778%" height="15" fill="rgb(215,77,49)" fg:x="1370" fg:w="5"/><text x="76.3611%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for u32&gt;::lt (5 samples, 0.28%)</title><rect x="76.1111%" y="309" width="0.2778%" height="15" fill="rgb(248,100,22)" fg:x="1370" fg:w="5"/><text x="76.3611%" y="319.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (100 samples, 5.56%)</title><rect x="72.5556%" y="357" width="5.5556%" height="15" fill="rgb(208,67,9)" fg:x="1306" fg:w="100"/><text x="72.8056%" y="367.50">core::s..</text></g><g><title>core::slice::sort::insert_tail (81 samples, 4.50%)</title><rect x="73.6111%" y="341" width="4.5000%" height="15" fill="rgb(219,133,21)" fg:x="1325" fg:w="81"/><text x="73.8611%" y="351.50">core:..</text></g><g><title>core::ptr::drop_in_place&lt;core::slice::sort::InsertionHole&lt;u32&gt;&gt; (31 samples, 1.72%)</title><rect x="76.3889%" y="325" width="1.7222%" height="15" fill="rgb(246,46,29)" fg:x="1375" fg:w="31"/><text x="76.6389%" y="335.50"></text></g><g><title>&lt;core::slice::sort::InsertionHole&lt;T&gt; as core::ops::drop::Drop&gt;::drop (31 samples, 1.72%)</title><rect x="76.3889%" y="309" width="1.7222%" height="15" fill="rgb(246,185,52)" fg:x="1375" fg:w="31"/><text x="76.6389%" y="319.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (31 samples, 1.72%)</title><rect x="76.3889%" y="293" width="1.7222%" height="15" fill="rgb(252,136,11)" fg:x="1375" fg:w="31"/><text x="76.6389%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::sort (101 samples, 5.61%)</title><rect x="72.5556%" y="389" width="5.6111%" height="15" fill="rgb(219,138,53)" fg:x="1306" fg:w="101"/><text x="72.8056%" y="399.50">alloc::..</text></g><g><title>alloc::slice::stable_sort (101 samples, 5.61%)</title><rect x="72.5556%" y="373" width="5.6111%" height="15" fill="rgb(211,51,23)" fg:x="1306" fg:w="101"/><text x="72.8056%" y="383.50">alloc::..</text></g><g><title>core::slice::sort::merge_sort (1 samples, 0.06%)</title><rect x="78.1111%" y="357" width="0.0556%" height="15" fill="rgb(247,221,28)" fg:x="1406" fg:w="1"/><text x="78.3611%" y="367.50"></text></g><g><title>&lt;F as core::str::pattern::MultiCharEq&gt;::matches (17 samples, 0.94%)</title><rect x="80.8889%" y="133" width="0.9444%" height="15" fill="rgb(251,222,45)" fg:x="1456" fg:w="17"/><text x="81.1389%" y="143.50"></text></g><g><title>&lt;core::str::IsWhitespace as core::ops::function::FnMut&lt;(char,)&gt;&gt;::call_mut (17 samples, 0.94%)</title><rect x="80.8889%" y="117" width="0.9444%" height="15" fill="rgb(217,162,53)" fg:x="1456" fg:w="17"/><text x="81.1389%" y="127.50"></text></g><g><title>&lt;core::str::IsWhitespace as core::ops::function::Fn&lt;(char,)&gt;&gt;::call (17 samples, 0.94%)</title><rect x="80.8889%" y="101" width="0.9444%" height="15" fill="rgb(229,93,14)" fg:x="1456" fg:w="17"/><text x="81.1389%" y="111.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::is_whitespace (17 samples, 0.94%)</title><rect x="80.8889%" y="85" width="0.9444%" height="15" fill="rgb(209,67,49)" fg:x="1456" fg:w="17"/><text x="81.1389%" y="95.50"></text></g><g><title>&lt;core::str::iter::SplitWhitespace as core::iter::traits::iterator::Iterator&gt;::next (52 samples, 2.89%)</title><rect x="80.2778%" y="277" width="2.8889%" height="15" fill="rgb(213,87,29)" fg:x="1445" fg:w="52"/><text x="80.5278%" y="287.50">&lt;c..</text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (52 samples, 2.89%)</title><rect x="80.2778%" y="261" width="2.8889%" height="15" fill="rgb(205,151,52)" fg:x="1445" fg:w="52"/><text x="80.5278%" y="271.50">&lt;c..</text></g><g><title>core::iter::traits::iterator::Iterator::find (52 samples, 2.89%)</title><rect x="80.2778%" y="245" width="2.8889%" height="15" fill="rgb(253,215,39)" fg:x="1445" fg:w="52"/><text x="80.5278%" y="255.50">co..</text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (52 samples, 2.89%)</title><rect x="80.2778%" y="229" width="2.8889%" height="15" fill="rgb(221,220,41)" fg:x="1445" fg:w="52"/><text x="80.5278%" y="239.50">co..</text></g><g><title>&lt;core::str::iter::Split&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (52 samples, 2.89%)</title><rect x="80.2778%" y="213" width="2.8889%" height="15" fill="rgb(218,133,21)" fg:x="1445" fg:w="52"/><text x="80.5278%" y="223.50">&lt;c..</text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next (52 samples, 2.89%)</title><rect x="80.2778%" y="197" width="2.8889%" height="15" fill="rgb(221,193,43)" fg:x="1445" fg:w="52"/><text x="80.5278%" y="207.50">co..</text></g><g><title>&lt;core::str::pattern::CharPredicateSearcher&lt;F&gt; as core::str::pattern::Searcher&gt;::next_match (41 samples, 2.28%)</title><rect x="80.8889%" y="181" width="2.2778%" height="15" fill="rgb(240,128,52)" fg:x="1456" fg:w="41"/><text x="81.1389%" y="191.50">&lt;..</text></g><g><title>core::str::pattern::Searcher::next_match (41 samples, 2.28%)</title><rect x="80.8889%" y="165" width="2.2778%" height="15" fill="rgb(253,114,12)" fg:x="1456" fg:w="41"/><text x="81.1389%" y="175.50">c..</text></g><g><title>&lt;core::str::pattern::MultiCharEqSearcher&lt;C&gt; as core::str::pattern::Searcher&gt;::next (41 samples, 2.28%)</title><rect x="80.8889%" y="149" width="2.2778%" height="15" fill="rgb(215,223,47)" fg:x="1456" fg:w="41"/><text x="81.1389%" y="159.50">&lt;..</text></g><g><title>&lt;core::str::iter::CharIndices as core::iter::traits::iterator::Iterator&gt;::next (24 samples, 1.33%)</title><rect x="81.8333%" y="133" width="1.3333%" height="15" fill="rgb(248,225,23)" fg:x="1473" fg:w="24"/><text x="82.0833%" y="143.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (14 samples, 0.78%)</title><rect x="82.3889%" y="117" width="0.7778%" height="15" fill="rgb(250,108,0)" fg:x="1483" fg:w="14"/><text x="82.6389%" y="127.50"></text></g><g><title>core::str::validations::next_code_point (14 samples, 0.78%)</title><rect x="82.3889%" y="101" width="0.7778%" height="15" fill="rgb(228,208,7)" fg:x="1483" fg:w="14"/><text x="82.6389%" y="111.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (10 samples, 0.56%)</title><rect x="82.6111%" y="85" width="0.5556%" height="15" fill="rgb(244,45,10)" fg:x="1487" fg:w="10"/><text x="82.8611%" y="95.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (4 samples, 0.22%)</title><rect x="82.9444%" y="69" width="0.2222%" height="15" fill="rgb(207,125,25)" fg:x="1493" fg:w="4"/><text x="83.1944%" y="79.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::add (4 samples, 0.22%)</title><rect x="82.9444%" y="53" width="0.2222%" height="15" fill="rgb(210,195,18)" fg:x="1493" fg:w="4"/><text x="83.1944%" y="63.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (4 samples, 0.22%)</title><rect x="82.9444%" y="37" width="0.2222%" height="15" fill="rgb(249,80,12)" fg:x="1493" fg:w="4"/><text x="83.1944%" y="47.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.39%)</title><rect x="83.9444%" y="181" width="0.3889%" height="15" fill="rgb(221,65,9)" fg:x="1511" fg:w="7"/><text x="84.1944%" y="191.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (5 samples, 0.28%)</title><rect x="84.0556%" y="165" width="0.2778%" height="15" fill="rgb(235,49,36)" fg:x="1513" fg:w="5"/><text x="84.3056%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (106 samples, 5.89%)</title><rect x="78.7222%" y="293" width="5.8889%" height="15" fill="rgb(225,32,20)" fg:x="1417" fg:w="106"/><text x="78.9722%" y="303.50">&lt;core::..</text></g><g><title>core::option::Option&lt;T&gt;::map (26 samples, 1.44%)</title><rect x="83.1667%" y="277" width="1.4444%" height="15" fill="rgb(215,141,46)" fg:x="1497" fg:w="26"/><text x="83.4167%" y="287.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (26 samples, 1.44%)</title><rect x="83.1667%" y="261" width="1.4444%" height="15" fill="rgb(250,160,47)" fg:x="1497" fg:w="26"/><text x="83.4167%" y="271.50"></text></g><g><title>aoc23::day4b::parse_game::_{{closure}} (26 samples, 1.44%)</title><rect x="83.1667%" y="245" width="1.4444%" height="15" fill="rgb(216,222,40)" fg:x="1497" fg:w="26"/><text x="83.4167%" y="255.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (26 samples, 1.44%)</title><rect x="83.1667%" y="229" width="1.4444%" height="15" fill="rgb(234,217,39)" fg:x="1497" fg:w="26"/><text x="83.4167%" y="239.50"></text></g><g><title>core::num::&lt;impl core::str::traits::FromStr for u32&gt;::from_str (26 samples, 1.44%)</title><rect x="83.1667%" y="213" width="1.4444%" height="15" fill="rgb(207,178,40)" fg:x="1497" fg:w="26"/><text x="83.4167%" y="223.50"></text></g><g><title>core::num::from_str_radix (21 samples, 1.17%)</title><rect x="83.4444%" y="197" width="1.1667%" height="15" fill="rgb(221,136,13)" fg:x="1502" fg:w="21"/><text x="83.6944%" y="207.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::to_digit (5 samples, 0.28%)</title><rect x="84.3333%" y="181" width="0.2778%" height="15" fill="rgb(249,199,10)" fg:x="1518" fg:w="5"/><text x="84.5833%" y="191.50"></text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_sub (2 samples, 0.11%)</title><rect x="84.5000%" y="165" width="0.1111%" height="15" fill="rgb(249,222,13)" fg:x="1521" fg:w="2"/><text x="84.7500%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (3 samples, 0.17%)</title><rect x="84.6111%" y="293" width="0.1667%" height="15" fill="rgb(244,185,38)" fg:x="1523" fg:w="3"/><text x="84.8611%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (3 samples, 0.17%)</title><rect x="84.6111%" y="277" width="0.1667%" height="15" fill="rgb(236,202,9)" fg:x="1523" fg:w="3"/><text x="84.8611%" y="287.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (3 samples, 0.17%)</title><rect x="84.8333%" y="229" width="0.1667%" height="15" fill="rgb(250,229,37)" fg:x="1527" fg:w="3"/><text x="85.0833%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (1 samples, 0.06%)</title><rect x="85.0000%" y="229" width="0.0556%" height="15" fill="rgb(206,174,23)" fg:x="1530" fg:w="1"/><text x="85.2500%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::set_ptr_and_cap (2 samples, 0.11%)</title><rect x="85.0556%" y="229" width="0.1111%" height="15" fill="rgb(211,33,43)" fg:x="1531" fg:w="2"/><text x="85.3056%" y="239.50"></text></g><g><title>__rdl_realloc (1 samples, 0.06%)</title><rect x="85.3333%" y="165" width="0.0556%" height="15" fill="rgb(245,58,50)" fg:x="1536" fg:w="1"/><text x="85.5833%" y="175.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (1 samples, 0.06%)</title><rect x="85.3333%" y="149" width="0.0556%" height="15" fill="rgb(244,68,36)" fg:x="1536" fg:w="1"/><text x="85.5833%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (89 samples, 4.94%)</title><rect x="85.2778%" y="213" width="4.9444%" height="15" fill="rgb(232,229,15)" fg:x="1535" fg:w="89"/><text x="85.5278%" y="223.50">&lt;alloc..</text></g><g><title>alloc::alloc::Global::grow_impl (89 samples, 4.94%)</title><rect x="85.2778%" y="197" width="4.9444%" height="15" fill="rgb(254,30,23)" fg:x="1535" fg:w="89"/><text x="85.5278%" y="207.50">alloc:..</text></g><g><title>alloc::alloc::realloc (89 samples, 4.94%)</title><rect x="85.2778%" y="181" width="4.9444%" height="15" fill="rgb(235,160,14)" fg:x="1535" fg:w="89"/><text x="85.5278%" y="191.50">alloc:..</text></g><g><title>realloc (87 samples, 4.83%)</title><rect x="85.3889%" y="165" width="4.8333%" height="15" fill="rgb(212,155,44)" fg:x="1537" fg:w="87"/><text x="85.6389%" y="175.50">realloc</text></g><g><title>[libc.so.6] (75 samples, 4.17%)</title><rect x="86.0556%" y="149" width="4.1667%" height="15" fill="rgb(226,2,50)" fg:x="1549" fg:w="75"/><text x="86.3056%" y="159.50">[libc..</text></g><g><title>[libc.so.6] (44 samples, 2.44%)</title><rect x="87.7778%" y="133" width="2.4444%" height="15" fill="rgb(234,177,6)" fg:x="1580" fg:w="44"/><text x="88.0278%" y="143.50">[l..</text></g><g><title>alloc::raw_vec::finish_grow (94 samples, 5.22%)</title><rect x="85.1667%" y="229" width="5.2222%" height="15" fill="rgb(217,24,9)" fg:x="1533" fg:w="94"/><text x="85.4167%" y="239.50">alloc:..</text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (3 samples, 0.17%)</title><rect x="90.2222%" y="213" width="0.1667%" height="15" fill="rgb(220,13,46)" fg:x="1624" fg:w="3"/><text x="90.4722%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (102 samples, 5.67%)</title><rect x="84.7778%" y="293" width="5.6667%" height="15" fill="rgb(239,221,27)" fg:x="1526" fg:w="102"/><text x="85.0278%" y="303.50">alloc::..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (102 samples, 5.67%)</title><rect x="84.7778%" y="277" width="5.6667%" height="15" fill="rgb(222,198,25)" fg:x="1526" fg:w="102"/><text x="85.0278%" y="287.50">alloc::..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (102 samples, 5.67%)</title><rect x="84.7778%" y="261" width="5.6667%" height="15" fill="rgb(211,99,13)" fg:x="1526" fg:w="102"/><text x="85.0278%" y="271.50">alloc::..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (102 samples, 5.67%)</title><rect x="84.7778%" y="245" width="5.6667%" height="15" fill="rgb(232,111,31)" fg:x="1526" fg:w="102"/><text x="85.0278%" y="255.50">alloc::..</text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (1 samples, 0.06%)</title><rect x="90.3889%" y="229" width="0.0556%" height="15" fill="rgb(245,82,37)" fg:x="1627" fg:w="1"/><text x="90.6389%" y="239.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (1 samples, 0.06%)</title><rect x="90.3889%" y="213" width="0.0556%" height="15" fill="rgb(227,149,46)" fg:x="1627" fg:w="1"/><text x="90.6389%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (230 samples, 12.78%)</title><rect x="78.3333%" y="325" width="12.7778%" height="15" fill="rgb(218,36,50)" fg:x="1410" fg:w="230"/><text x="78.5833%" y="335.50">&lt;alloc::vec::Vec&lt;T,..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (230 samples, 12.78%)</title><rect x="78.3333%" y="309" width="12.7778%" height="15" fill="rgb(226,80,48)" fg:x="1410" fg:w="230"/><text x="78.5833%" y="319.50">alloc::vec::Vec&lt;T,A..</text></g><g><title>core::ptr::write (12 samples, 0.67%)</title><rect x="90.4444%" y="293" width="0.6667%" height="15" fill="rgb(238,224,15)" fg:x="1628" fg:w="12"/><text x="90.6944%" y="303.50"></text></g><g><title>&lt;F as core::str::pattern::MultiCharEq&gt;::matches (1 samples, 0.06%)</title><rect x="91.3889%" y="165" width="0.0556%" height="15" fill="rgb(241,136,10)" fg:x="1645" fg:w="1"/><text x="91.6389%" y="175.50"></text></g><g><title>&lt;core::str::IsWhitespace as core::ops::function::FnMut&lt;(char,)&gt;&gt;::call_mut (1 samples, 0.06%)</title><rect x="91.3889%" y="149" width="0.0556%" height="15" fill="rgb(208,32,45)" fg:x="1645" fg:w="1"/><text x="91.6389%" y="159.50"></text></g><g><title>&lt;core::str::IsWhitespace as core::ops::function::Fn&lt;(char,)&gt;&gt;::call (1 samples, 0.06%)</title><rect x="91.3889%" y="133" width="0.0556%" height="15" fill="rgb(207,135,9)" fg:x="1645" fg:w="1"/><text x="91.6389%" y="143.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::is_whitespace (1 samples, 0.06%)</title><rect x="91.3889%" y="117" width="0.0556%" height="15" fill="rgb(206,86,44)" fg:x="1645" fg:w="1"/><text x="91.6389%" y="127.50"></text></g><g><title>&lt;core::str::iter::SplitWhitespace as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.33%)</title><rect x="91.2778%" y="309" width="0.3333%" height="15" fill="rgb(245,177,15)" fg:x="1643" fg:w="6"/><text x="91.5278%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.33%)</title><rect x="91.2778%" y="293" width="0.3333%" height="15" fill="rgb(206,64,50)" fg:x="1643" fg:w="6"/><text x="91.5278%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (6 samples, 0.33%)</title><rect x="91.2778%" y="277" width="0.3333%" height="15" fill="rgb(234,36,40)" fg:x="1643" fg:w="6"/><text x="91.5278%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (6 samples, 0.33%)</title><rect x="91.2778%" y="261" width="0.3333%" height="15" fill="rgb(213,64,8)" fg:x="1643" fg:w="6"/><text x="91.5278%" y="271.50"></text></g><g><title>&lt;core::str::iter::Split&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.33%)</title><rect x="91.2778%" y="245" width="0.3333%" height="15" fill="rgb(210,75,36)" fg:x="1643" fg:w="6"/><text x="91.5278%" y="255.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next (6 samples, 0.33%)</title><rect x="91.2778%" y="229" width="0.3333%" height="15" fill="rgb(229,88,21)" fg:x="1643" fg:w="6"/><text x="91.5278%" y="239.50"></text></g><g><title>&lt;core::str::pattern::CharPredicateSearcher&lt;F&gt; as core::str::pattern::Searcher&gt;::next_match (4 samples, 0.22%)</title><rect x="91.3889%" y="213" width="0.2222%" height="15" fill="rgb(252,204,47)" fg:x="1645" fg:w="4"/><text x="91.6389%" y="223.50"></text></g><g><title>core::str::pattern::Searcher::next_match (4 samples, 0.22%)</title><rect x="91.3889%" y="197" width="0.2222%" height="15" fill="rgb(208,77,27)" fg:x="1645" fg:w="4"/><text x="91.6389%" y="207.50"></text></g><g><title>&lt;core::str::pattern::MultiCharEqSearcher&lt;C&gt; as core::str::pattern::Searcher&gt;::next (4 samples, 0.22%)</title><rect x="91.3889%" y="181" width="0.2222%" height="15" fill="rgb(221,76,26)" fg:x="1645" fg:w="4"/><text x="91.6389%" y="191.50"></text></g><g><title>&lt;core::str::iter::CharIndices as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.17%)</title><rect x="91.4444%" y="165" width="0.1667%" height="15" fill="rgb(225,139,18)" fg:x="1646" fg:w="3"/><text x="91.6944%" y="175.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.11%)</title><rect x="91.5000%" y="149" width="0.1111%" height="15" fill="rgb(230,137,11)" fg:x="1647" fg:w="2"/><text x="91.7500%" y="159.50"></text></g><g><title>core::str::validations::next_code_point (2 samples, 0.11%)</title><rect x="91.5000%" y="133" width="0.1111%" height="15" fill="rgb(212,28,1)" fg:x="1647" fg:w="2"/><text x="91.7500%" y="143.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.11%)</title><rect x="91.5000%" y="117" width="0.1111%" height="15" fill="rgb(248,164,17)" fg:x="1647" fg:w="2"/><text x="91.7500%" y="127.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (14 samples, 0.78%)</title><rect x="91.1111%" y="325" width="0.7778%" height="15" fill="rgb(222,171,42)" fg:x="1640" fg:w="14"/><text x="91.3611%" y="335.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (5 samples, 0.28%)</title><rect x="91.6111%" y="309" width="0.2778%" height="15" fill="rgb(243,84,45)" fg:x="1649" fg:w="5"/><text x="91.8611%" y="319.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (5 samples, 0.28%)</title><rect x="91.6111%" y="293" width="0.2778%" height="15" fill="rgb(252,49,23)" fg:x="1649" fg:w="5"/><text x="91.8611%" y="303.50"></text></g><g><title>aoc23::day4b::parse_game::_{{closure}} (5 samples, 0.28%)</title><rect x="91.6111%" y="277" width="0.2778%" height="15" fill="rgb(215,19,7)" fg:x="1649" fg:w="5"/><text x="91.8611%" y="287.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (5 samples, 0.28%)</title><rect x="91.6111%" y="261" width="0.2778%" height="15" fill="rgb(238,81,41)" fg:x="1649" fg:w="5"/><text x="91.8611%" y="271.50"></text></g><g><title>core::num::&lt;impl core::str::traits::FromStr for u32&gt;::from_str (5 samples, 0.28%)</title><rect x="91.6111%" y="245" width="0.2778%" height="15" fill="rgb(210,199,37)" fg:x="1649" fg:w="5"/><text x="91.8611%" y="255.50"></text></g><g><title>core::num::from_str_radix (5 samples, 0.28%)</title><rect x="91.6111%" y="229" width="0.2778%" height="15" fill="rgb(244,192,49)" fg:x="1649" fg:w="5"/><text x="91.8611%" y="239.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.11%)</title><rect x="91.7778%" y="213" width="0.1111%" height="15" fill="rgb(226,211,11)" fg:x="1652" fg:w="2"/><text x="92.0278%" y="223.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.06%)</title><rect x="91.8333%" y="197" width="0.0556%" height="15" fill="rgb(236,162,54)" fg:x="1653" fg:w="1"/><text x="92.0833%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (7 samples, 0.39%)</title><rect x="91.8889%" y="325" width="0.3889%" height="15" fill="rgb(220,229,9)" fg:x="1654" fg:w="7"/><text x="92.1389%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (7 samples, 0.39%)</title><rect x="91.8889%" y="309" width="0.3889%" height="15" fill="rgb(250,87,22)" fg:x="1654" fg:w="7"/><text x="92.1389%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (7 samples, 0.39%)</title><rect x="91.8889%" y="293" width="0.3889%" height="15" fill="rgb(239,43,17)" fg:x="1654" fg:w="7"/><text x="92.1389%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (7 samples, 0.39%)</title><rect x="91.8889%" y="277" width="0.3889%" height="15" fill="rgb(231,177,25)" fg:x="1654" fg:w="7"/><text x="92.1389%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (7 samples, 0.39%)</title><rect x="91.8889%" y="261" width="0.3889%" height="15" fill="rgb(219,179,1)" fg:x="1654" fg:w="7"/><text x="92.1389%" y="271.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (7 samples, 0.39%)</title><rect x="91.8889%" y="245" width="0.3889%" height="15" fill="rgb(238,219,53)" fg:x="1654" fg:w="7"/><text x="92.1389%" y="255.50"></text></g><g><title>alloc::alloc::alloc (7 samples, 0.39%)</title><rect x="91.8889%" y="229" width="0.3889%" height="15" fill="rgb(232,167,36)" fg:x="1654" fg:w="7"/><text x="92.1389%" y="239.50"></text></g><g><title>malloc (7 samples, 0.39%)</title><rect x="91.8889%" y="213" width="0.3889%" height="15" fill="rgb(244,19,51)" fg:x="1654" fg:w="7"/><text x="92.1389%" y="223.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (423 samples, 23.50%)</title><rect x="68.8333%" y="421" width="23.5000%" height="15" fill="rgb(224,6,22)" fg:x="1239" fg:w="423"/><text x="69.0833%" y="431.50">core::iter::traits::iterator::Iterato..</text></g><g><title>&lt;alloc::collections::btree::set::BTreeSet&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (423 samples, 23.50%)</title><rect x="68.8333%" y="405" width="23.5000%" height="15" fill="rgb(224,145,5)" fg:x="1239" fg:w="423"/><text x="69.0833%" y="415.50">&lt;alloc::collections::btree::set::BTre..</text></g><g><title>core::iter::traits::iterator::Iterator::collect (255 samples, 14.17%)</title><rect x="78.1667%" y="389" width="14.1667%" height="15" fill="rgb(234,130,49)" fg:x="1407" fg:w="255"/><text x="78.4167%" y="399.50">core::iter::traits::it..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (255 samples, 14.17%)</title><rect x="78.1667%" y="373" width="14.1667%" height="15" fill="rgb(254,6,2)" fg:x="1407" fg:w="255"/><text x="78.4167%" y="383.50">&lt;alloc::vec::Vec&lt;T&gt; as..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (255 samples, 14.17%)</title><rect x="78.1667%" y="357" width="14.1667%" height="15" fill="rgb(208,96,46)" fg:x="1407" fg:w="255"/><text x="78.4167%" y="367.50">&lt;alloc::vec::Vec&lt;T&gt; as..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (255 samples, 14.17%)</title><rect x="78.1667%" y="341" width="14.1667%" height="15" fill="rgb(239,3,39)" fg:x="1407" fg:w="255"/><text x="78.4167%" y="351.50">&lt;alloc::vec::Vec&lt;T&gt; as..</text></g><g><title>core::ptr::write (1 samples, 0.06%)</title><rect x="92.2778%" y="325" width="0.0556%" height="15" fill="rgb(233,210,1)" fg:x="1661" fg:w="1"/><text x="92.5278%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::map (5 samples, 0.28%)</title><rect x="92.3333%" y="421" width="0.2778%" height="15" fill="rgb(244,137,37)" fg:x="1662" fg:w="5"/><text x="92.5833%" y="431.50"></text></g><g><title>core::iter::adapters::map::Map&lt;I,F&gt;::new (5 samples, 0.28%)</title><rect x="92.3333%" y="405" width="0.2778%" height="15" fill="rgb(240,136,2)" fg:x="1662" fg:w="5"/><text x="92.5833%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (1 samples, 0.06%)</title><rect x="92.6111%" y="373" width="0.0556%" height="15" fill="rgb(239,18,37)" fg:x="1667" fg:w="1"/><text x="92.8611%" y="383.50"></text></g><g><title>alloc::collections::btree::navigate::LazyLeafRange&lt;alloc::collections::btree::node::marker::Dying,K,V&gt;::deallocating_end (6 samples, 0.33%)</title><rect x="92.6667%" y="309" width="0.3333%" height="15" fill="rgb(218,185,22)" fg:x="1668" fg:w="6"/><text x="92.9167%" y="319.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_end (6 samples, 0.33%)</title><rect x="92.6667%" y="293" width="0.3333%" height="15" fill="rgb(225,218,4)" fg:x="1668" fg:w="6"/><text x="92.9167%" y="303.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::deallocate_and_ascend (6 samples, 0.33%)</title><rect x="92.6667%" y="277" width="0.3333%" height="15" fill="rgb(230,182,32)" fg:x="1668" fg:w="6"/><text x="92.9167%" y="287.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;::ascend (6 samples, 0.33%)</title><rect x="92.6667%" y="261" width="0.3333%" height="15" fill="rgb(242,56,43)" fg:x="1668" fg:w="6"/><text x="92.9167%" y="271.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (1 samples, 0.06%)</title><rect x="92.9444%" y="245" width="0.0556%" height="15" fill="rgb(233,99,24)" fg:x="1673" fg:w="1"/><text x="93.1944%" y="255.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;,alloc::collections::btree::node::marker::KV&gt;&gt;::next_leaf_edge (7 samples, 0.39%)</title><rect x="93.2222%" y="229" width="0.3889%" height="15" fill="rgb(234,209,42)" fg:x="1678" fg:w="7"/><text x="93.4722%" y="239.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (16 samples, 0.89%)</title><rect x="93.0000%" y="293" width="0.8889%" height="15" fill="rgb(227,7,12)" fg:x="1674" fg:w="16"/><text x="93.2500%" y="303.50"></text></g><g><title>alloc::collections::btree::mem::replace (16 samples, 0.89%)</title><rect x="93.0000%" y="277" width="0.8889%" height="15" fill="rgb(245,203,43)" fg:x="1674" fg:w="16"/><text x="93.2500%" y="287.50"></text></g><g><title>alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked::_{{closure}} (16 samples, 0.89%)</title><rect x="93.0000%" y="261" width="0.8889%" height="15" fill="rgb(238,205,33)" fg:x="1674" fg:w="16"/><text x="93.2500%" y="271.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next (16 samples, 0.89%)</title><rect x="93.0000%" y="245" width="0.8889%" height="15" fill="rgb(231,56,7)" fg:x="1674" fg:w="16"/><text x="93.2500%" y="255.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,NodeType&gt;,alloc::collections::btree::node::marker::Edge&gt;::right_kv (5 samples, 0.28%)</title><rect x="93.6111%" y="229" width="0.2778%" height="15" fill="rgb(244,186,29)" fg:x="1685" fg:w="5"/><text x="93.8611%" y="239.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;::len (5 samples, 0.28%)</title><rect x="93.6111%" y="213" width="0.2778%" height="15" fill="rgb(234,111,31)" fg:x="1685" fg:w="5"/><text x="93.8611%" y="223.50"></text></g><g><title>core::mem::drop (28 samples, 1.56%)</title><rect x="92.6667%" y="373" width="1.5556%" height="15" fill="rgb(241,149,10)" fg:x="1668" fg:w="28"/><text x="92.9167%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;u32,alloc::collections::btree::set_val::SetValZST&gt;&gt; (28 samples, 1.56%)</title><rect x="92.6667%" y="357" width="1.5556%" height="15" fill="rgb(249,206,44)" fg:x="1668" fg:w="28"/><text x="92.9167%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (28 samples, 1.56%)</title><rect x="92.6667%" y="341" width="1.5556%" height="15" fill="rgb(251,153,30)" fg:x="1668" fg:w="28"/><text x="92.9167%" y="351.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (28 samples, 1.56%)</title><rect x="92.6667%" y="325" width="1.5556%" height="15" fill="rgb(239,152,38)" fg:x="1668" fg:w="28"/><text x="92.9167%" y="335.50"></text></g><g><title>alloc::collections::btree::navigate::LazyLeafRange&lt;alloc::collections::btree::node::marker::Dying,K,V&gt;::deallocating_next_unchecked (22 samples, 1.22%)</title><rect x="93.0000%" y="309" width="1.2222%" height="15" fill="rgb(249,139,47)" fg:x="1674" fg:w="22"/><text x="93.2500%" y="319.50"></text></g><g><title>alloc::collections::btree::navigate::LazyLeafRange&lt;BorrowType,K,V&gt;::init_front (6 samples, 0.33%)</title><rect x="93.8889%" y="293" width="0.3333%" height="15" fill="rgb(244,64,35)" fg:x="1690" fg:w="6"/><text x="94.1389%" y="303.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::first_leaf_edge (1 samples, 0.06%)</title><rect x="94.1667%" y="277" width="0.0556%" height="15" fill="rgb(216,46,15)" fg:x="1695" fg:w="1"/><text x="94.4167%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (30 samples, 1.67%)</title><rect x="92.6111%" y="389" width="1.6667%" height="15" fill="rgb(250,74,19)" fg:x="1667" fg:w="30"/><text x="92.8611%" y="399.50"></text></g><g><title>core::ptr::read (1 samples, 0.06%)</title><rect x="94.2222%" y="373" width="0.0556%" height="15" fill="rgb(249,42,33)" fg:x="1696" fg:w="1"/><text x="94.4722%" y="383.50"></text></g><g><title>__rdl_dealloc (2 samples, 0.11%)</title><rect x="94.2778%" y="389" width="0.1111%" height="15" fill="rgb(242,149,17)" fg:x="1697" fg:w="2"/><text x="94.5278%" y="399.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (2 samples, 0.11%)</title><rect x="94.2778%" y="373" width="0.1111%" height="15" fill="rgb(244,29,21)" fg:x="1697" fg:w="2"/><text x="94.5278%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::set::BTreeSet&lt;u32&gt;&gt; (50 samples, 2.78%)</title><rect x="92.6111%" y="421" width="2.7778%" height="15" fill="rgb(220,130,37)" fg:x="1667" fg:w="50"/><text x="92.8611%" y="431.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::BTreeMap&lt;u32,alloc::collections::btree::set_val::SetValZST&gt;&gt; (50 samples, 2.78%)</title><rect x="92.6111%" y="405" width="2.7778%" height="15" fill="rgb(211,67,2)" fg:x="1667" fg:w="50"/><text x="92.8611%" y="415.50">co..</text></g><g><title>cfree (18 samples, 1.00%)</title><rect x="94.3889%" y="389" width="1.0000%" height="15" fill="rgb(235,68,52)" fg:x="1699" fg:w="18"/><text x="94.6389%" y="399.50"></text></g><g><title>[libc.so.6] (12 samples, 0.67%)</title><rect x="94.7222%" y="373" width="0.6667%" height="15" fill="rgb(246,142,3)" fg:x="1705" fg:w="12"/><text x="94.9722%" y="383.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (3 samples, 0.17%)</title><rect x="95.3889%" y="389" width="0.1667%" height="15" fill="rgb(241,25,7)" fg:x="1717" fg:w="3"/><text x="95.6389%" y="399.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (3 samples, 0.17%)</title><rect x="95.3889%" y="373" width="0.1667%" height="15" fill="rgb(242,119,39)" fg:x="1717" fg:w="3"/><text x="95.6389%" y="383.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (3 samples, 0.17%)</title><rect x="95.3889%" y="357" width="0.1667%" height="15" fill="rgb(241,98,45)" fg:x="1717" fg:w="3"/><text x="95.6389%" y="367.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::align_offset (3 samples, 0.17%)</title><rect x="95.9444%" y="357" width="0.1667%" height="15" fill="rgb(254,28,30)" fg:x="1727" fg:w="3"/><text x="96.1944%" y="367.50"></text></g><g><title>core::ptr::align_offset (3 samples, 0.17%)</title><rect x="95.9444%" y="341" width="0.1667%" height="15" fill="rgb(241,142,54)" fg:x="1727" fg:w="3"/><text x="96.1944%" y="351.50"></text></g><g><title>core::slice::memchr::contains_zero_byte (7 samples, 0.39%)</title><rect x="96.1111%" y="357" width="0.3889%" height="15" fill="rgb(222,85,15)" fg:x="1730" fg:w="7"/><text x="96.3611%" y="367.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (3 samples, 0.17%)</title><rect x="96.3333%" y="341" width="0.1667%" height="15" fill="rgb(210,85,47)" fg:x="1734" fg:w="3"/><text x="96.5833%" y="351.50"></text></g><g><title>core::slice::memchr::memchr_naive (22 samples, 1.22%)</title><rect x="96.5000%" y="357" width="1.2222%" height="15" fill="rgb(224,206,25)" fg:x="1737" fg:w="22"/><text x="96.7500%" y="367.50"></text></g><g><title>aoc23::day4b::parse_game (1,552 samples, 86.22%)</title><rect x="11.6111%" y="437" width="86.2222%" height="15" fill="rgb(243,201,19)" fg:x="209" fg:w="1552"/><text x="11.8611%" y="447.50">aoc23::day4b::parse_game</text></g><g><title>core::str::&lt;impl str&gt;::split_once (44 samples, 2.44%)</title><rect x="95.3889%" y="421" width="2.4444%" height="15" fill="rgb(236,59,4)" fg:x="1717" fg:w="44"/><text x="95.6389%" y="431.50">co..</text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (44 samples, 2.44%)</title><rect x="95.3889%" y="405" width="2.4444%" height="15" fill="rgb(254,179,45)" fg:x="1717" fg:w="44"/><text x="95.6389%" y="415.50">&lt;c..</text></g><g><title>core::slice::memchr::memchr (41 samples, 2.28%)</title><rect x="95.5556%" y="389" width="2.2778%" height="15" fill="rgb(226,14,10)" fg:x="1720" fg:w="41"/><text x="95.8056%" y="399.50">c..</text></g><g><title>core::slice::memchr::memchr_aligned (41 samples, 2.28%)</title><rect x="95.5556%" y="373" width="2.2778%" height="15" fill="rgb(244,27,41)" fg:x="1720" fg:w="41"/><text x="95.8056%" y="383.50">c..</text></g><g><title>core::slice::memchr::repeat_byte (2 samples, 0.11%)</title><rect x="97.7222%" y="357" width="0.1111%" height="15" fill="rgb(235,35,32)" fg:x="1759" fg:w="2"/><text x="97.9722%" y="367.50"></text></g><g><title>__rdl_dealloc (1 samples, 0.06%)</title><rect x="97.8333%" y="341" width="0.0556%" height="15" fill="rgb(218,68,31)" fg:x="1761" fg:w="1"/><text x="98.0833%" y="351.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (1 samples, 0.06%)</title><rect x="97.8333%" y="325" width="0.0556%" height="15" fill="rgb(207,120,37)" fg:x="1761" fg:w="1"/><text x="98.0833%" y="335.50"></text></g><g><title>__rust_dealloc (1 samples, 0.06%)</title><rect x="97.8889%" y="341" width="0.0556%" height="15" fill="rgb(227,98,0)" fg:x="1762" fg:w="1"/><text x="98.1389%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,627 samples, 90.39%)</title><rect x="7.9444%" y="501" width="90.3889%" height="15" fill="rgb(207,7,3)" fg:x="143" fg:w="1627"/><text x="8.1944%" y="511.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next</text></g><g><title>core::option::Option&lt;T&gt;::map (1,568 samples, 87.11%)</title><rect x="11.2222%" y="485" width="87.1111%" height="15" fill="rgb(206,98,19)" fg:x="202" fg:w="1568"/><text x="11.4722%" y="495.50">core::option::Option&lt;T&gt;::map</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (1,562 samples, 86.78%)</title><rect x="11.5556%" y="469" width="86.7778%" height="15" fill="rgb(217,5,26)" fg:x="208" fg:w="1562"/><text x="11.8056%" y="479.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once</text></g><g><title>aoc23::day4b::solve_file::_{{closure}} (1,562 samples, 86.78%)</title><rect x="11.5556%" y="453" width="86.7778%" height="15" fill="rgb(235,190,38)" fg:x="208" fg:w="1562"/><text x="11.8056%" y="463.50">aoc23::day4b::solve_file::_{{closure}}</text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (9 samples, 0.50%)</title><rect x="97.8333%" y="437" width="0.5000%" height="15" fill="rgb(247,86,24)" fg:x="1761" fg:w="9"/><text x="98.0833%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (9 samples, 0.50%)</title><rect x="97.8333%" y="421" width="0.5000%" height="15" fill="rgb(205,101,16)" fg:x="1761" fg:w="9"/><text x="98.0833%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (9 samples, 0.50%)</title><rect x="97.8333%" y="405" width="0.5000%" height="15" fill="rgb(246,168,33)" fg:x="1761" fg:w="9"/><text x="98.0833%" y="415.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.50%)</title><rect x="97.8333%" y="389" width="0.5000%" height="15" fill="rgb(231,114,1)" fg:x="1761" fg:w="9"/><text x="98.0833%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (9 samples, 0.50%)</title><rect x="97.8333%" y="373" width="0.5000%" height="15" fill="rgb(207,184,53)" fg:x="1761" fg:w="9"/><text x="98.0833%" y="383.50"></text></g><g><title>alloc::alloc::dealloc (9 samples, 0.50%)</title><rect x="97.8333%" y="357" width="0.5000%" height="15" fill="rgb(224,95,51)" fg:x="1761" fg:w="9"/><text x="98.0833%" y="367.50"></text></g><g><title>cfree (7 samples, 0.39%)</title><rect x="97.9444%" y="341" width="0.3889%" height="15" fill="rgb(212,188,45)" fg:x="1763" fg:w="7"/><text x="98.1944%" y="351.50"></text></g><g><title>[libc.so.6] (5 samples, 0.28%)</title><rect x="98.0556%" y="325" width="0.2778%" height="15" fill="rgb(223,154,38)" fg:x="1765" fg:w="5"/><text x="98.3056%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (6 samples, 0.33%)</title><rect x="98.3333%" y="501" width="0.3333%" height="15" fill="rgb(251,22,52)" fg:x="1770" fg:w="6"/><text x="98.5833%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (6 samples, 0.33%)</title><rect x="98.3333%" y="485" width="0.3333%" height="15" fill="rgb(229,209,22)" fg:x="1770" fg:w="6"/><text x="98.5833%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (6 samples, 0.33%)</title><rect x="98.3333%" y="469" width="0.3333%" height="15" fill="rgb(234,138,34)" fg:x="1770" fg:w="6"/><text x="98.5833%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (6 samples, 0.33%)</title><rect x="98.3333%" y="453" width="0.3333%" height="15" fill="rgb(212,95,11)" fg:x="1770" fg:w="6"/><text x="98.5833%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (6 samples, 0.33%)</title><rect x="98.3333%" y="437" width="0.3333%" height="15" fill="rgb(240,179,47)" fg:x="1770" fg:w="6"/><text x="98.5833%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (6 samples, 0.33%)</title><rect x="98.3333%" y="421" width="0.3333%" height="15" fill="rgb(240,163,11)" fg:x="1770" fg:w="6"/><text x="98.5833%" y="431.50"></text></g><g><title>alloc::alloc::Global::grow_impl (6 samples, 0.33%)</title><rect x="98.3333%" y="405" width="0.3333%" height="15" fill="rgb(236,37,12)" fg:x="1770" fg:w="6"/><text x="98.5833%" y="415.50"></text></g><g><title>alloc::alloc::realloc (6 samples, 0.33%)</title><rect x="98.3333%" y="389" width="0.3333%" height="15" fill="rgb(232,164,16)" fg:x="1770" fg:w="6"/><text x="98.5833%" y="399.50"></text></g><g><title>realloc (6 samples, 0.33%)</title><rect x="98.3333%" y="373" width="0.3333%" height="15" fill="rgb(244,205,15)" fg:x="1770" fg:w="6"/><text x="98.5833%" y="383.50"></text></g><g><title>[libc.so.6] (6 samples, 0.33%)</title><rect x="98.3333%" y="357" width="0.3333%" height="15" fill="rgb(223,117,47)" fg:x="1770" fg:w="6"/><text x="98.5833%" y="367.50"></text></g><g><title>[libc.so.6] (6 samples, 0.33%)</title><rect x="98.3333%" y="341" width="0.3333%" height="15" fill="rgb(244,107,35)" fg:x="1770" fg:w="6"/><text x="98.5833%" y="351.50"></text></g><g><title>[libc.so.6] (4 samples, 0.22%)</title><rect x="98.4444%" y="325" width="0.2222%" height="15" fill="rgb(205,140,8)" fg:x="1772" fg:w="4"/><text x="98.6944%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1,637 samples, 90.94%)</title><rect x="7.9444%" y="533" width="90.9444%" height="15" fill="rgb(228,84,46)" fg:x="143" fg:w="1637"/><text x="8.1944%" y="543.50">&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (1,637 samples, 90.94%)</title><rect x="7.9444%" y="517" width="90.9444%" height="15" fill="rgb(254,188,9)" fg:x="143" fg:w="1637"/><text x="8.1944%" y="527.50">alloc::vec::Vec&lt;T,A&gt;::extend_desugared</text></g><g><title>core::ptr::write (4 samples, 0.22%)</title><rect x="98.6667%" y="501" width="0.2222%" height="15" fill="rgb(206,112,54)" fg:x="1776" fg:w="4"/><text x="98.9167%" y="511.50"></text></g><g><title>&lt;core::str::iter::SplitWhitespace as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.06%)</title><rect x="98.9444%" y="373" width="0.0556%" height="15" fill="rgb(216,84,49)" fg:x="1781" fg:w="1"/><text x="99.1944%" y="383.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.06%)</title><rect x="98.9444%" y="357" width="0.0556%" height="15" fill="rgb(214,194,35)" fg:x="1781" fg:w="1"/><text x="99.1944%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (1 samples, 0.06%)</title><rect x="98.9444%" y="341" width="0.0556%" height="15" fill="rgb(249,28,3)" fg:x="1781" fg:w="1"/><text x="99.1944%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (1 samples, 0.06%)</title><rect x="98.9444%" y="325" width="0.0556%" height="15" fill="rgb(222,56,52)" fg:x="1781" fg:w="1"/><text x="99.1944%" y="335.50"></text></g><g><title>&lt;core::str::iter::Split&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.06%)</title><rect x="98.9444%" y="309" width="0.0556%" height="15" fill="rgb(245,217,50)" fg:x="1781" fg:w="1"/><text x="99.1944%" y="319.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next (1 samples, 0.06%)</title><rect x="98.9444%" y="293" width="0.0556%" height="15" fill="rgb(213,201,24)" fg:x="1781" fg:w="1"/><text x="99.1944%" y="303.50"></text></g><g><title>&lt;core::str::pattern::CharPredicateSearcher&lt;F&gt; as core::str::pattern::Searcher&gt;::next_match (1 samples, 0.06%)</title><rect x="98.9444%" y="277" width="0.0556%" height="15" fill="rgb(248,116,28)" fg:x="1781" fg:w="1"/><text x="99.1944%" y="287.50"></text></g><g><title>core::str::pattern::Searcher::next_match (1 samples, 0.06%)</title><rect x="98.9444%" y="261" width="0.0556%" height="15" fill="rgb(219,72,43)" fg:x="1781" fg:w="1"/><text x="99.1944%" y="271.50"></text></g><g><title>&lt;core::str::pattern::MultiCharEqSearcher&lt;C&gt; as core::str::pattern::Searcher&gt;::next (1 samples, 0.06%)</title><rect x="98.9444%" y="245" width="0.0556%" height="15" fill="rgb(209,138,14)" fg:x="1781" fg:w="1"/><text x="99.1944%" y="255.50"></text></g><g><title>&lt;core::str::iter::CharIndices as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.06%)</title><rect x="98.9444%" y="229" width="0.0556%" height="15" fill="rgb(222,18,33)" fg:x="1781" fg:w="1"/><text x="99.1944%" y="239.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.06%)</title><rect x="98.9444%" y="213" width="0.0556%" height="15" fill="rgb(213,199,7)" fg:x="1781" fg:w="1"/><text x="99.1944%" y="223.50"></text></g><g><title>core::str::validations::next_code_point (1 samples, 0.06%)</title><rect x="98.9444%" y="197" width="0.0556%" height="15" fill="rgb(250,110,10)" fg:x="1781" fg:w="1"/><text x="99.1944%" y="207.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;::reborrow (1 samples, 0.06%)</title><rect x="99.0000%" y="277" width="0.0556%" height="15" fill="rgb(248,123,6)" fg:x="1782" fg:w="1"/><text x="99.2500%" y="287.50"></text></g><g><title>alloc::collections::btree::set::BTreeSet&lt;T,A&gt;::contains (4 samples, 0.22%)</title><rect x="99.0000%" y="325" width="0.2222%" height="15" fill="rgb(206,91,31)" fg:x="1782" fg:w="4"/><text x="99.2500%" y="335.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::contains_key (4 samples, 0.22%)</title><rect x="99.0000%" y="309" width="0.2222%" height="15" fill="rgb(211,154,13)" fg:x="1782" fg:w="4"/><text x="99.2500%" y="319.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::get (4 samples, 0.22%)</title><rect x="99.0000%" y="293" width="0.2222%" height="15" fill="rgb(225,148,7)" fg:x="1782" fg:w="4"/><text x="99.2500%" y="303.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (3 samples, 0.17%)</title><rect x="99.0556%" y="277" width="0.1667%" height="15" fill="rgb(220,160,43)" fg:x="1783" fg:w="3"/><text x="99.3056%" y="287.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::search_node (2 samples, 0.11%)</title><rect x="99.1111%" y="261" width="0.1111%" height="15" fill="rgb(213,52,39)" fg:x="1784" fg:w="2"/><text x="99.3611%" y="271.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (2 samples, 0.11%)</title><rect x="99.1111%" y="245" width="0.1111%" height="15" fill="rgb(243,137,7)" fg:x="1784" fg:w="2"/><text x="99.3611%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::count (8 samples, 0.44%)</title><rect x="98.8889%" y="453" width="0.4444%" height="15" fill="rgb(230,79,13)" fg:x="1780" fg:w="8"/><text x="99.1389%" y="463.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (8 samples, 0.44%)</title><rect x="98.8889%" y="437" width="0.4444%" height="15" fill="rgb(247,105,23)" fg:x="1780" fg:w="8"/><text x="99.1389%" y="447.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (8 samples, 0.44%)</title><rect x="98.8889%" y="421" width="0.4444%" height="15" fill="rgb(223,179,41)" fg:x="1780" fg:w="8"/><text x="99.1389%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (8 samples, 0.44%)</title><rect x="98.8889%" y="405" width="0.4444%" height="15" fill="rgb(218,9,34)" fg:x="1780" fg:w="8"/><text x="99.1389%" y="415.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (7 samples, 0.39%)</title><rect x="98.9444%" y="389" width="0.3889%" height="15" fill="rgb(222,106,8)" fg:x="1781" fg:w="7"/><text x="99.1944%" y="399.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (6 samples, 0.33%)</title><rect x="99.0000%" y="373" width="0.3333%" height="15" fill="rgb(211,220,0)" fg:x="1782" fg:w="6"/><text x="99.2500%" y="383.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::count::to_usize::_{{closure}} (6 samples, 0.33%)</title><rect x="99.0000%" y="357" width="0.3333%" height="15" fill="rgb(229,52,16)" fg:x="1782" fg:w="6"/><text x="99.2500%" y="367.50"></text></g><g><title>aoc23::day4b::parse_game::_{{closure}} (6 samples, 0.33%)</title><rect x="99.0000%" y="341" width="0.3333%" height="15" fill="rgb(212,155,18)" fg:x="1782" fg:w="6"/><text x="99.2500%" y="351.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (2 samples, 0.11%)</title><rect x="99.2222%" y="325" width="0.1111%" height="15" fill="rgb(242,21,14)" fg:x="1786" fg:w="2"/><text x="99.4722%" y="335.50"></text></g><g><title>core::num::&lt;impl core::str::traits::FromStr for u32&gt;::from_str (2 samples, 0.11%)</title><rect x="99.2222%" y="309" width="0.1111%" height="15" fill="rgb(222,19,48)" fg:x="1786" fg:w="2"/><text x="99.4722%" y="319.50"></text></g><g><title>core::num::from_str_radix (2 samples, 0.11%)</title><rect x="99.2222%" y="293" width="0.1111%" height="15" fill="rgb(232,45,27)" fg:x="1786" fg:w="2"/><text x="99.4722%" y="303.50"></text></g><g><title>alloc::collections::btree::set::BTreeSet&lt;T,A&gt;::from_sorted_iter (1 samples, 0.06%)</title><rect x="99.3333%" y="421" width="0.0556%" height="15" fill="rgb(249,103,42)" fg:x="1788" fg:w="1"/><text x="99.5833%" y="431.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::bulk_build_from_sorted_iter (1 samples, 0.06%)</title><rect x="99.3333%" y="405" width="0.0556%" height="15" fill="rgb(246,81,33)" fg:x="1788" fg:w="1"/><text x="99.5833%" y="415.50"></text></g><g><title>alloc::collections::btree::append::&lt;impl alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::bulk_push (1 samples, 0.06%)</title><rect x="99.3333%" y="389" width="0.0556%" height="15" fill="rgb(252,33,42)" fg:x="1788" fg:w="1"/><text x="99.5833%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::dedup_sorted_iter::DedupSortedIter&lt;u32,alloc::collections::btree::set_val::SetValZST,core::iter::adapters::map::Map&lt;alloc::vec::into_iter::IntoIter&lt;u32&gt;,alloc::collections::btree::set::BTreeSet&lt;u32&gt;::from_sorted_iter&lt;alloc::vec::into_iter::IntoIter&lt;u32&gt;&gt;::{{closure}}&gt;&gt;&gt; (1 samples, 0.06%)</title><rect x="99.3333%" y="373" width="0.0556%" height="15" fill="rgb(209,212,41)" fg:x="1788" fg:w="1"/><text x="99.5833%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::peekable::Peekable&lt;core::iter::adapters::map::Map&lt;alloc::vec::into_iter::IntoIter&lt;u32&gt;,alloc::collections::btree::set::BTreeSet&lt;u32&gt;::from_sorted_iter&lt;alloc::vec::into_iter::IntoIter&lt;u32&gt;&gt;::{{closure}}&gt;&gt;&gt; (1 samples, 0.06%)</title><rect x="99.3333%" y="357" width="0.0556%" height="15" fill="rgb(207,154,6)" fg:x="1788" fg:w="1"/><text x="99.5833%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::map::Map&lt;alloc::vec::into_iter::IntoIter&lt;u32&gt;,alloc::collections::btree::set::BTreeSet&lt;u32&gt;::from_sorted_iter&lt;alloc::vec::into_iter::IntoIter&lt;u32&gt;&gt;::{{closure}}&gt;&gt; (1 samples, 0.06%)</title><rect x="99.3333%" y="341" width="0.0556%" height="15" fill="rgb(223,64,47)" fg:x="1788" fg:w="1"/><text x="99.5833%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;u32&gt;&gt; (1 samples, 0.06%)</title><rect x="99.3333%" y="325" width="0.0556%" height="15" fill="rgb(211,161,38)" fg:x="1788" fg:w="1"/><text x="99.5833%" y="335.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.06%)</title><rect x="99.3333%" y="309" width="0.0556%" height="15" fill="rgb(219,138,40)" fg:x="1788" fg:w="1"/><text x="99.5833%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;u32,alloc::alloc::Global&gt;&gt; (1 samples, 0.06%)</title><rect x="99.3333%" y="293" width="0.0556%" height="15" fill="rgb(241,228,46)" fg:x="1788" fg:w="1"/><text x="99.5833%" y="303.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.06%)</title><rect x="99.3333%" y="277" width="0.0556%" height="15" fill="rgb(223,209,38)" fg:x="1788" fg:w="1"/><text x="99.5833%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u32&gt;&gt; (1 samples, 0.06%)</title><rect x="99.3333%" y="261" width="0.0556%" height="15" fill="rgb(236,164,45)" fg:x="1788" fg:w="1"/><text x="99.5833%" y="271.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.06%)</title><rect x="99.3333%" y="245" width="0.0556%" height="15" fill="rgb(231,15,5)" fg:x="1788" fg:w="1"/><text x="99.5833%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.06%)</title><rect x="99.3333%" y="229" width="0.0556%" height="15" fill="rgb(252,35,15)" fg:x="1788" fg:w="1"/><text x="99.5833%" y="239.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.06%)</title><rect x="99.3333%" y="213" width="0.0556%" height="15" fill="rgb(248,181,18)" fg:x="1788" fg:w="1"/><text x="99.5833%" y="223.50"></text></g><g><title>cfree (1 samples, 0.06%)</title><rect x="99.3333%" y="197" width="0.0556%" height="15" fill="rgb(233,39,42)" fg:x="1788" fg:w="1"/><text x="99.5833%" y="207.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::sort (1 samples, 0.06%)</title><rect x="99.3889%" y="421" width="0.0556%" height="15" fill="rgb(238,110,33)" fg:x="1789" fg:w="1"/><text x="99.6389%" y="431.50"></text></g><g><title>alloc::slice::stable_sort (1 samples, 0.06%)</title><rect x="99.3889%" y="405" width="0.0556%" height="15" fill="rgb(233,195,10)" fg:x="1789" fg:w="1"/><text x="99.6389%" y="415.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (1 samples, 0.06%)</title><rect x="99.3889%" y="389" width="0.0556%" height="15" fill="rgb(254,105,3)" fg:x="1789" fg:w="1"/><text x="99.6389%" y="399.50"></text></g><g><title>core::slice::sort::insert_tail (1 samples, 0.06%)</title><rect x="99.3889%" y="373" width="0.0556%" height="15" fill="rgb(221,225,9)" fg:x="1789" fg:w="1"/><text x="99.6389%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::slice::sort::InsertionHole&lt;u32&gt;&gt; (1 samples, 0.06%)</title><rect x="99.3889%" y="357" width="0.0556%" height="15" fill="rgb(224,227,45)" fg:x="1789" fg:w="1"/><text x="99.6389%" y="367.50"></text></g><g><title>&lt;core::slice::sort::InsertionHole&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.06%)</title><rect x="99.3889%" y="341" width="0.0556%" height="15" fill="rgb(229,198,43)" fg:x="1789" fg:w="1"/><text x="99.6389%" y="351.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.06%)</title><rect x="99.3889%" y="325" width="0.0556%" height="15" fill="rgb(206,209,35)" fg:x="1789" fg:w="1"/><text x="99.6389%" y="335.50"></text></g><g><title>&lt;core::str::iter::SplitWhitespace as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.06%)</title><rect x="99.4444%" y="309" width="0.0556%" height="15" fill="rgb(245,195,53)" fg:x="1790" fg:w="1"/><text x="99.6944%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.06%)</title><rect x="99.4444%" y="293" width="0.0556%" height="15" fill="rgb(240,92,26)" fg:x="1790" fg:w="1"/><text x="99.6944%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (1 samples, 0.06%)</title><rect x="99.4444%" y="277" width="0.0556%" height="15" fill="rgb(207,40,23)" fg:x="1790" fg:w="1"/><text x="99.6944%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (1 samples, 0.06%)</title><rect x="99.4444%" y="261" width="0.0556%" height="15" fill="rgb(223,111,35)" fg:x="1790" fg:w="1"/><text x="99.6944%" y="271.50"></text></g><g><title>&lt;core::str::iter::Split&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.06%)</title><rect x="99.4444%" y="245" width="0.0556%" height="15" fill="rgb(229,147,28)" fg:x="1790" fg:w="1"/><text x="99.6944%" y="255.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next (1 samples, 0.06%)</title><rect x="99.4444%" y="229" width="0.0556%" height="15" fill="rgb(211,29,28)" fg:x="1790" fg:w="1"/><text x="99.6944%" y="239.50"></text></g><g><title>&lt;core::str::pattern::CharPredicateSearcher&lt;F&gt; as core::str::pattern::Searcher&gt;::next_match (1 samples, 0.06%)</title><rect x="99.4444%" y="213" width="0.0556%" height="15" fill="rgb(228,72,33)" fg:x="1790" fg:w="1"/><text x="99.6944%" y="223.50"></text></g><g><title>core::str::pattern::Searcher::next_match (1 samples, 0.06%)</title><rect x="99.4444%" y="197" width="0.0556%" height="15" fill="rgb(205,214,31)" fg:x="1790" fg:w="1"/><text x="99.6944%" y="207.50"></text></g><g><title>&lt;core::str::pattern::MultiCharEqSearcher&lt;C&gt; as core::str::pattern::Searcher&gt;::next (1 samples, 0.06%)</title><rect x="99.4444%" y="181" width="0.0556%" height="15" fill="rgb(224,111,15)" fg:x="1790" fg:w="1"/><text x="99.6944%" y="191.50"></text></g><g><title>&lt;core::str::iter::CharIndices as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.06%)</title><rect x="99.4444%" y="165" width="0.0556%" height="15" fill="rgb(253,21,26)" fg:x="1790" fg:w="1"/><text x="99.6944%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.11%)</title><rect x="99.4444%" y="325" width="0.1111%" height="15" fill="rgb(245,139,43)" fg:x="1790" fg:w="2"/><text x="99.6944%" y="335.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (1 samples, 0.06%)</title><rect x="99.5000%" y="309" width="0.0556%" height="15" fill="rgb(252,170,7)" fg:x="1791" fg:w="1"/><text x="99.7500%" y="319.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (1 samples, 0.06%)</title><rect x="99.5000%" y="293" width="0.0556%" height="15" fill="rgb(231,118,14)" fg:x="1791" fg:w="1"/><text x="99.7500%" y="303.50"></text></g><g><title>aoc23::day4b::parse_game::_{{closure}} (1 samples, 0.06%)</title><rect x="99.5000%" y="277" width="0.0556%" height="15" fill="rgb(238,83,0)" fg:x="1791" fg:w="1"/><text x="99.7500%" y="287.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (1 samples, 0.06%)</title><rect x="99.5000%" y="261" width="0.0556%" height="15" fill="rgb(221,39,39)" fg:x="1791" fg:w="1"/><text x="99.7500%" y="271.50"></text></g><g><title>core::num::&lt;impl core::str::traits::FromStr for u32&gt;::from_str (1 samples, 0.06%)</title><rect x="99.5000%" y="245" width="0.0556%" height="15" fill="rgb(222,119,46)" fg:x="1791" fg:w="1"/><text x="99.7500%" y="255.50"></text></g><g><title>core::num::from_str_radix (1 samples, 0.06%)</title><rect x="99.5000%" y="229" width="0.0556%" height="15" fill="rgb(222,165,49)" fg:x="1791" fg:w="1"/><text x="99.7500%" y="239.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.06%)</title><rect x="99.5000%" y="213" width="0.0556%" height="15" fill="rgb(219,113,52)" fg:x="1791" fg:w="1"/><text x="99.7500%" y="223.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.06%)</title><rect x="99.5000%" y="197" width="0.0556%" height="15" fill="rgb(214,7,15)" fg:x="1791" fg:w="1"/><text x="99.7500%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.06%)</title><rect x="99.5556%" y="245" width="0.0556%" height="15" fill="rgb(235,32,4)" fg:x="1792" fg:w="1"/><text x="99.8056%" y="255.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.06%)</title><rect x="99.5556%" y="229" width="0.0556%" height="15" fill="rgb(238,90,54)" fg:x="1792" fg:w="1"/><text x="99.8056%" y="239.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.06%)</title><rect x="99.5556%" y="213" width="0.0556%" height="15" fill="rgb(213,208,19)" fg:x="1792" fg:w="1"/><text x="99.8056%" y="223.50"></text></g><g><title>realloc (1 samples, 0.06%)</title><rect x="99.5556%" y="197" width="0.0556%" height="15" fill="rgb(233,156,4)" fg:x="1792" fg:w="1"/><text x="99.8056%" y="207.50"></text></g><g><title>[libc.so.6] (1 samples, 0.06%)</title><rect x="99.5556%" y="181" width="0.0556%" height="15" fill="rgb(207,194,5)" fg:x="1792" fg:w="1"/><text x="99.8056%" y="191.50"></text></g><g><title>[libc.so.6] (1 samples, 0.06%)</title><rect x="99.5556%" y="165" width="0.0556%" height="15" fill="rgb(206,111,30)" fg:x="1792" fg:w="1"/><text x="99.8056%" y="175.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (1,651 samples, 91.72%)</title><rect x="7.9444%" y="597" width="91.7222%" height="15" fill="rgb(243,70,54)" fg:x="143" fg:w="1651"/><text x="8.1944%" y="607.50">core::iter::traits::iterator::Iterator::collect</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (1,651 samples, 91.72%)</title><rect x="7.9444%" y="581" width="91.7222%" height="15" fill="rgb(242,28,8)" fg:x="143" fg:w="1651"/><text x="8.1944%" y="591.50">&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1,651 samples, 91.72%)</title><rect x="7.9444%" y="565" width="91.7222%" height="15" fill="rgb(219,106,18)" fg:x="143" fg:w="1651"/><text x="8.1944%" y="575.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (1,651 samples, 91.72%)</title><rect x="7.9444%" y="549" width="91.7222%" height="15" fill="rgb(244,222,10)" fg:x="143" fg:w="1651"/><text x="8.1944%" y="559.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (14 samples, 0.78%)</title><rect x="98.8889%" y="533" width="0.7778%" height="15" fill="rgb(236,179,52)" fg:x="1780" fg:w="14"/><text x="99.1389%" y="543.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (14 samples, 0.78%)</title><rect x="98.8889%" y="517" width="0.7778%" height="15" fill="rgb(213,23,39)" fg:x="1780" fg:w="14"/><text x="99.1389%" y="527.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (14 samples, 0.78%)</title><rect x="98.8889%" y="501" width="0.7778%" height="15" fill="rgb(238,48,10)" fg:x="1780" fg:w="14"/><text x="99.1389%" y="511.50"></text></g><g><title>aoc23::day4b::solve_file::_{{closure}} (14 samples, 0.78%)</title><rect x="98.8889%" y="485" width="0.7778%" height="15" fill="rgb(251,196,23)" fg:x="1780" fg:w="14"/><text x="99.1389%" y="495.50"></text></g><g><title>aoc23::day4b::parse_game (14 samples, 0.78%)</title><rect x="98.8889%" y="469" width="0.7778%" height="15" fill="rgb(250,152,24)" fg:x="1780" fg:w="14"/><text x="99.1389%" y="479.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (6 samples, 0.33%)</title><rect x="99.3333%" y="453" width="0.3333%" height="15" fill="rgb(209,150,17)" fg:x="1788" fg:w="6"/><text x="99.5833%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::set::BTreeSet&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (6 samples, 0.33%)</title><rect x="99.3333%" y="437" width="0.3333%" height="15" fill="rgb(234,202,34)" fg:x="1788" fg:w="6"/><text x="99.5833%" y="447.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (4 samples, 0.22%)</title><rect x="99.4444%" y="421" width="0.2222%" height="15" fill="rgb(253,148,53)" fg:x="1790" fg:w="4"/><text x="99.6944%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (4 samples, 0.22%)</title><rect x="99.4444%" y="405" width="0.2222%" height="15" fill="rgb(218,129,16)" fg:x="1790" fg:w="4"/><text x="99.6944%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (4 samples, 0.22%)</title><rect x="99.4444%" y="389" width="0.2222%" height="15" fill="rgb(216,85,19)" fg:x="1790" fg:w="4"/><text x="99.6944%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (4 samples, 0.22%)</title><rect x="99.4444%" y="373" width="0.2222%" height="15" fill="rgb(235,228,7)" fg:x="1790" fg:w="4"/><text x="99.6944%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (4 samples, 0.22%)</title><rect x="99.4444%" y="357" width="0.2222%" height="15" fill="rgb(245,175,0)" fg:x="1790" fg:w="4"/><text x="99.6944%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (4 samples, 0.22%)</title><rect x="99.4444%" y="341" width="0.2222%" height="15" fill="rgb(208,168,36)" fg:x="1790" fg:w="4"/><text x="99.6944%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (2 samples, 0.11%)</title><rect x="99.5556%" y="325" width="0.1111%" height="15" fill="rgb(246,171,24)" fg:x="1792" fg:w="2"/><text x="99.8056%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (2 samples, 0.11%)</title><rect x="99.5556%" y="309" width="0.1111%" height="15" fill="rgb(215,142,24)" fg:x="1792" fg:w="2"/><text x="99.8056%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.11%)</title><rect x="99.5556%" y="293" width="0.1111%" height="15" fill="rgb(250,187,7)" fg:x="1792" fg:w="2"/><text x="99.8056%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (2 samples, 0.11%)</title><rect x="99.5556%" y="277" width="0.1111%" height="15" fill="rgb(228,66,33)" fg:x="1792" fg:w="2"/><text x="99.8056%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.11%)</title><rect x="99.5556%" y="261" width="0.1111%" height="15" fill="rgb(234,215,21)" fg:x="1792" fg:w="2"/><text x="99.8056%" y="271.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (1 samples, 0.06%)</title><rect x="99.6111%" y="245" width="0.0556%" height="15" fill="rgb(222,191,20)" fg:x="1793" fg:w="1"/><text x="99.8611%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;aoc23::day4b::Game&gt;&gt; (1 samples, 0.06%)</title><rect x="99.6667%" y="597" width="0.0556%" height="15" fill="rgb(245,79,54)" fg:x="1794" fg:w="1"/><text x="99.9167%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;aoc23::day4b::Game&gt;&gt; (1 samples, 0.06%)</title><rect x="99.6667%" y="581" width="0.0556%" height="15" fill="rgb(240,10,37)" fg:x="1794" fg:w="1"/><text x="99.9167%" y="591.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.06%)</title><rect x="99.6667%" y="565" width="0.0556%" height="15" fill="rgb(214,192,32)" fg:x="1794" fg:w="1"/><text x="99.9167%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.06%)</title><rect x="99.6667%" y="549" width="0.0556%" height="15" fill="rgb(209,36,54)" fg:x="1794" fg:w="1"/><text x="99.9167%" y="559.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.06%)</title><rect x="99.6667%" y="533" width="0.0556%" height="15" fill="rgb(220,10,11)" fg:x="1794" fg:w="1"/><text x="99.9167%" y="543.50"></text></g><g><title>cfree (1 samples, 0.06%)</title><rect x="99.6667%" y="517" width="0.0556%" height="15" fill="rgb(221,106,17)" fg:x="1794" fg:w="1"/><text x="99.9167%" y="527.50"></text></g><g><title>[libc.so.6] (1 samples, 0.06%)</title><rect x="99.6667%" y="501" width="0.0556%" height="15" fill="rgb(251,142,44)" fg:x="1794" fg:w="1"/><text x="99.9167%" y="511.50"></text></g><g><title>all (1,800 samples, 100%)</title><rect x="0.0000%" y="933" width="100.0000%" height="15" fill="rgb(238,13,15)" fg:x="0" fg:w="1800"/><text x="0.2500%" y="943.50"></text></g><g><title>aoc23 (1,800 samples, 100.00%)</title><rect x="0.0000%" y="917" width="100.0000%" height="15" fill="rgb(208,107,27)" fg:x="0" fg:w="1800"/><text x="0.2500%" y="927.50">aoc23</text></g><g><title>_start (1,665 samples, 92.50%)</title><rect x="7.5000%" y="901" width="92.5000%" height="15" fill="rgb(205,136,37)" fg:x="135" fg:w="1665"/><text x="7.7500%" y="911.50">_start</text></g><g><title>__libc_start_main (1,665 samples, 92.50%)</title><rect x="7.5000%" y="885" width="92.5000%" height="15" fill="rgb(250,205,27)" fg:x="135" fg:w="1665"/><text x="7.7500%" y="895.50">__libc_start_main</text></g><g><title>[libc.so.6] (1,665 samples, 92.50%)</title><rect x="7.5000%" y="869" width="92.5000%" height="15" fill="rgb(210,80,43)" fg:x="135" fg:w="1665"/><text x="7.7500%" y="879.50">[libc.so.6]</text></g><g><title>std::rt::lang_start (1,665 samples, 92.50%)</title><rect x="7.5000%" y="853" width="92.5000%" height="15" fill="rgb(247,160,36)" fg:x="135" fg:w="1665"/><text x="7.7500%" y="863.50">std::rt::lang_start</text></g><g><title>std::rt::lang_start_internal (1,665 samples, 92.50%)</title><rect x="7.5000%" y="837" width="92.5000%" height="15" fill="rgb(234,13,49)" fg:x="135" fg:w="1665"/><text x="7.7500%" y="847.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (1,665 samples, 92.50%)</title><rect x="7.5000%" y="821" width="92.5000%" height="15" fill="rgb(234,122,0)" fg:x="135" fg:w="1665"/><text x="7.7500%" y="831.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,665 samples, 92.50%)</title><rect x="7.5000%" y="805" width="92.5000%" height="15" fill="rgb(207,146,38)" fg:x="135" fg:w="1665"/><text x="7.7500%" y="815.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,665 samples, 92.50%)</title><rect x="7.5000%" y="789" width="92.5000%" height="15" fill="rgb(207,177,25)" fg:x="135" fg:w="1665"/><text x="7.7500%" y="799.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::_{{closure}} (1,665 samples, 92.50%)</title><rect x="7.5000%" y="773" width="92.5000%" height="15" fill="rgb(211,178,42)" fg:x="135" fg:w="1665"/><text x="7.7500%" y="783.50">std::rt::lang_start_internal::_{{closure}}</text></g><g><title>std::panic::catch_unwind (1,665 samples, 92.50%)</title><rect x="7.5000%" y="757" width="92.5000%" height="15" fill="rgb(230,69,54)" fg:x="135" fg:w="1665"/><text x="7.7500%" y="767.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,665 samples, 92.50%)</title><rect x="7.5000%" y="741" width="92.5000%" height="15" fill="rgb(214,135,41)" fg:x="135" fg:w="1665"/><text x="7.7500%" y="751.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,665 samples, 92.50%)</title><rect x="7.5000%" y="725" width="92.5000%" height="15" fill="rgb(237,67,25)" fg:x="135" fg:w="1665"/><text x="7.7500%" y="735.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1,665 samples, 92.50%)</title><rect x="7.5000%" y="709" width="92.5000%" height="15" fill="rgb(222,189,50)" fg:x="135" fg:w="1665"/><text x="7.7500%" y="719.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::_{{closure}} (1,665 samples, 92.50%)</title><rect x="7.5000%" y="693" width="92.5000%" height="15" fill="rgb(245,148,34)" fg:x="135" fg:w="1665"/><text x="7.7500%" y="703.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,665 samples, 92.50%)</title><rect x="7.5000%" y="677" width="92.5000%" height="15" fill="rgb(222,29,6)" fg:x="135" fg:w="1665"/><text x="7.7500%" y="687.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (1,665 samples, 92.50%)</title><rect x="7.5000%" y="661" width="92.5000%" height="15" fill="rgb(221,189,43)" fg:x="135" fg:w="1665"/><text x="7.7500%" y="671.50">core::ops::function::FnOnce::call_once</text></g><g><title>aoc23::main (1,665 samples, 92.50%)</title><rect x="7.5000%" y="645" width="92.5000%" height="15" fill="rgb(207,36,27)" fg:x="135" fg:w="1665"/><text x="7.7500%" y="655.50">aoc23::main</text></g><g><title>aoc23::day4b::solve_day (1,665 samples, 92.50%)</title><rect x="7.5000%" y="629" width="92.5000%" height="15" fill="rgb(217,90,24)" fg:x="135" fg:w="1665"/><text x="7.7500%" y="639.50">aoc23::day4b::solve_day</text></g><g><title>aoc23::day4b::solve_file (1,665 samples, 92.50%)</title><rect x="7.5000%" y="613" width="92.5000%" height="15" fill="rgb(224,66,35)" fg:x="135" fg:w="1665"/><text x="7.7500%" y="623.50">aoc23::day4b::solve_file</text></g><g><title>std::io::buffered::bufreader::BufReader&lt;R&gt;::new (5 samples, 0.28%)</title><rect x="99.7222%" y="597" width="0.2778%" height="15" fill="rgb(221,13,50)" fg:x="1795" fg:w="5"/><text x="99.9722%" y="607.50"></text></g><g><title>std::io::buffered::bufreader::BufReader&lt;R&gt;::with_capacity (5 samples, 0.28%)</title><rect x="99.7222%" y="581" width="0.2778%" height="15" fill="rgb(236,68,49)" fg:x="1795" fg:w="5"/><text x="99.9722%" y="591.50"></text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::with_capacity (5 samples, 0.28%)</title><rect x="99.7222%" y="565" width="0.2778%" height="15" fill="rgb(229,146,28)" fg:x="1795" fg:w="5"/><text x="99.9722%" y="575.50"></text></g><g><title>alloc::boxed::Box&lt;[T]&gt;::new_uninit_slice (5 samples, 0.28%)</title><rect x="99.7222%" y="549" width="0.2778%" height="15" fill="rgb(225,31,38)" fg:x="1795" fg:w="5"/><text x="99.9722%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (5 samples, 0.28%)</title><rect x="99.7222%" y="533" width="0.2778%" height="15" fill="rgb(250,208,3)" fg:x="1795" fg:w="5"/><text x="99.9722%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (5 samples, 0.28%)</title><rect x="99.7222%" y="517" width="0.2778%" height="15" fill="rgb(246,54,23)" fg:x="1795" fg:w="5"/><text x="99.9722%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (5 samples, 0.28%)</title><rect x="99.7222%" y="501" width="0.2778%" height="15" fill="rgb(243,76,11)" fg:x="1795" fg:w="5"/><text x="99.9722%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (5 samples, 0.28%)</title><rect x="99.7222%" y="485" width="0.2778%" height="15" fill="rgb(245,21,50)" fg:x="1795" fg:w="5"/><text x="99.9722%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (5 samples, 0.28%)</title><rect x="99.7222%" y="469" width="0.2778%" height="15" fill="rgb(228,9,43)" fg:x="1795" fg:w="5"/><text x="99.9722%" y="479.50"></text></g><g><title>alloc::alloc::alloc (5 samples, 0.28%)</title><rect x="99.7222%" y="453" width="0.2778%" height="15" fill="rgb(208,100,47)" fg:x="1795" fg:w="5"/><text x="99.9722%" y="463.50"></text></g><g><title>malloc (5 samples, 0.28%)</title><rect x="99.7222%" y="437" width="0.2778%" height="15" fill="rgb(232,26,8)" fg:x="1795" fg:w="5"/><text x="99.9722%" y="447.50"></text></g><g><title>[libc.so.6] (5 samples, 0.28%)</title><rect x="99.7222%" y="421" width="0.2778%" height="15" fill="rgb(216,166,38)" fg:x="1795" fg:w="5"/><text x="99.9722%" y="431.50"></text></g><g><title>[libc.so.6] (5 samples, 0.28%)</title><rect x="99.7222%" y="405" width="0.2778%" height="15" fill="rgb(251,202,51)" fg:x="1795" fg:w="5"/><text x="99.9722%" y="415.50"></text></g></svg></svg>